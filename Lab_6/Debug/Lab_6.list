
Lab_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003944  08003944  00004944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080039d4  080039d4  000049d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039dc  080039dc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039dc  080039dc  000049dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039e0  080039e0  000049e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080039e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000001f8  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008943  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014fa  00000000  00000000  0000d9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0000eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000532  00000000  00000000  0000f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe75  00000000  00000000  0000fae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a083  00000000  00000000  0002f957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baf94  00000000  00000000  000399da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f496e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021fc  00000000  00000000  000f49b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f6bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800392c 	.word	0x0800392c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800392c 	.word	0x0800392c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 faa8 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f824 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f894 	bl	80003a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000280:	f000 f862 	bl	8000348 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("Green LED OFF \n\r");
 8000284:	480d      	ldr	r0, [pc, #52]	@ (80002bc <main+0x4c>)
 8000286:	f002 fce3 	bl	8002c50 <iprintf>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000292:	f000 fd7b 	bl	8000d8c <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 8000296:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800029a:	f000 fafb 	bl	8000894 <HAL_Delay>

	printf("Green LED ON \n\r");
 800029e:	4808      	ldr	r0, [pc, #32]	@ (80002c0 <main+0x50>)
 80002a0:	f002 fcd6 	bl	8002c50 <iprintf>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	2120      	movs	r1, #32
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ac:	f000 fd6e 	bl	8000d8c <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 80002b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002b4:	f000 faee 	bl	8000894 <HAL_Delay>
	printf("Green LED OFF \n\r");
 80002b8:	bf00      	nop
 80002ba:	e7e3      	b.n	8000284 <main+0x14>
 80002bc:	08003944 	.word	0x08003944
 80002c0:	08003958 	.word	0x08003958

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	@ 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	@ 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fd11 	bl	8002cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002fa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fd59 	bl	8000dbc <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000310:	f000 f8e0 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fd82 	bl	8001e38 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800033a:	f000 f8cb 	bl	80004d4 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	@ 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800034c:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800034e:	4a15      	ldr	r2, [pc, #84]	@ (80003a4 <MX_USART2_UART_Init+0x5c>)
 8000350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000352:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037e:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800038c:	f001 ff74 	bl	8002278 <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000396:	f000 f89d 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000084 	.word	0x20000084
 80003a4:	40004400 	.word	0x40004400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	@ 0x28
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003be:	4b39      	ldr	r3, [pc, #228]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a38      	ldr	r2, [pc, #224]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b36      	ldr	r3, [pc, #216]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003d2:	613b      	str	r3, [r7, #16]
 80003d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003d6:	4b33      	ldr	r3, [pc, #204]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a32      	ldr	r2, [pc, #200]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b30      	ldr	r3, [pc, #192]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b2d      	ldr	r3, [pc, #180]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a2c      	ldr	r2, [pc, #176]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b2a      	ldr	r3, [pc, #168]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000406:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a26      	ldr	r2, [pc, #152]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 800040c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b24      	ldr	r3, [pc, #144]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000424:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000428:	f000 fcb0 	bl	8000d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800042c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800043a:	f107 0314 	add.w	r3, r7, #20
 800043e:	4619      	mov	r1, r3
 8000440:	4819      	ldr	r0, [pc, #100]	@ (80004a8 <MX_GPIO_Init+0x100>)
 8000442:	f000 fb31 	bl	8000aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000446:	2320      	movs	r3, #32
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2300      	movs	r3, #0
 8000454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	4619      	mov	r1, r3
 800045c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000460:	f000 fb22 	bl	8000aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800046a:	2311      	movs	r3, #17
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000480:	f000 fb12 	bl	8000aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = RED_BUTTON_Pin;
 8000484:	2320      	movs	r3, #32
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048c:	2301      	movs	r3, #1
 800048e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4619      	mov	r1, r3
 8000496:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_GPIO_Init+0x104>)
 8000498:	f000 fb06 	bl	8000aa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049c:	bf00      	nop
 800049e:	3728      	adds	r7, #40	@ 0x28
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	48000800 	.word	0x48000800
 80004ac:	48000400 	.word	0x48000400

080004b0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PRINTF_UART2 {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &data, 1, 0xFFFF);
 80004b8:	1d39      	adds	r1, r7, #4
 80004ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004be:	2201      	movs	r2, #1
 80004c0:	4803      	ldr	r0, [pc, #12]	@ (80004d0 <__io_putchar+0x20>)
 80004c2:	f001 ff27 	bl	8002314 <HAL_UART_Transmit>
	return data;
 80004c6:	687b      	ldr	r3, [r7, #4]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000084 	.word	0x20000084

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <Error_Handler+0x8>

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000524 <HAL_MspInit+0x44>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <HAL_MspInit+0x44>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000516:	2007      	movs	r0, #7
 8000518:	f000 fa92 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <HAL_UART_MspInit+0x7c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d128      	bne.n	800059c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800054a:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a16      	ldr	r2, [pc, #88]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800057a:	230c      	movs	r3, #12
 800057c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800058a:	2307      	movs	r3, #7
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000598:	f000 fa86 	bl	8000aa8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800059c:	bf00      	nop
 800059e:	3728      	adds	r7, #40	@ 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40004400 	.word	0x40004400
 80005a8:	40021000 	.word	0x40021000

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <NMI_Handler+0x4>

080005b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <MemManage_Handler+0x4>

080005c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000602:	f000 f927 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}

0800060a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e00a      	b.n	8000632 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800061c:	f3af 8000 	nop.w
 8000620:	4601      	mov	r1, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	60ba      	str	r2, [r7, #8]
 8000628:	b2ca      	uxtb	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	3301      	adds	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	429a      	cmp	r2, r3
 8000638:	dbf0      	blt.n	800061c <_read+0x12>
  }

  return len;
 800063a:	687b      	ldr	r3, [r7, #4]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	e009      	b.n	800066a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	60ba      	str	r2, [r7, #8]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff26 	bl	80004b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	3301      	adds	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	697a      	ldr	r2, [r7, #20]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	429a      	cmp	r2, r3
 8000670:	dbf1      	blt.n	8000656 <_write+0x12>
  }
  return len;
 8000672:	687b      	ldr	r3, [r7, #4]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <_close>:

int _close(int file)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006a4:	605a      	str	r2, [r3, #4]
  return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <_isatty>:

int _isatty(int file)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006bc:	2301      	movs	r3, #1
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b085      	sub	sp, #20
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ec:	4a14      	ldr	r2, [pc, #80]	@ (8000740 <_sbrk+0x5c>)
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <_sbrk+0x60>)
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f8:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d102      	bne.n	8000706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <_sbrk+0x64>)
 8000702:	4a12      	ldr	r2, [pc, #72]	@ (800074c <_sbrk+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	429a      	cmp	r2, r3
 8000712:	d207      	bcs.n	8000724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000714:	f002 fb40 	bl	8002d98 <__errno>
 8000718:	4603      	mov	r3, r0
 800071a:	220c      	movs	r2, #12
 800071c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	e009      	b.n	8000738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <_sbrk+0x64>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072a:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	4a05      	ldr	r2, [pc, #20]	@ (8000748 <_sbrk+0x64>)
 8000734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20003000 	.word	0x20003000
 8000744:	00000400 	.word	0x00000400
 8000748:	2000010c 	.word	0x2000010c
 800074c:	20000260 	.word	0x20000260

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000778:	f7ff ffea 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	@ (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	@ (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a2:	f002 faff 	bl	8002da4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a6:	f7ff fd63 	bl	8000270 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007b8:	080039e4 	.word	0x080039e4
  ldr r2, =_sbss
 80007bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007c0:	20000260 	.word	0x20000260

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_Init+0x28>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_Init+0x28>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f931 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 f808 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff fe7c 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40022000 	.word	0x40022000

080007f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_InitTick+0x54>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <HAL_InitTick+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800080a:	fbb3 f3f1 	udiv	r3, r3, r1
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f93b 	bl	8000a8e <HAL_SYSTICK_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e00e      	b.n	8000840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d80a      	bhi.n	800083e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 f911 	bl	8000a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4a06      	ldr	r2, [pc, #24]	@ (8000850 <HAL_InitTick+0x5c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000000 	.word	0x20000000
 800084c:	20000008 	.word	0x20000008
 8000850:	20000004 	.word	0x20000004

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_IncTick+0x20>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_IncTick+0x24>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <HAL_IncTick+0x24>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008
 8000878:	20000110 	.word	0x20000110

0800087c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <HAL_GetTick+0x14>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000110 	.word	0x20000110

08000894 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800089c:	f7ff ffee 	bl	800087c <HAL_GetTick>
 80008a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ac:	d005      	beq.n	80008ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <HAL_Delay+0x44>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4413      	add	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008ba:	bf00      	nop
 80008bc:	f7ff ffde 	bl	800087c <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d8f7      	bhi.n	80008bc <HAL_Delay+0x28>
  {
  }
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000008 	.word	0x20000008

080008dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	@ (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	@ (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	@ 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	@ 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff8e 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff47 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff5c 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff8e 	bl	8000994 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5d 	bl	8000940 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ffb0 	bl	80009fc <SysTick_Config>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	e14e      	b.n	8000d56 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	2101      	movs	r1, #1
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 8140 	beq.w	8000d50 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d005      	beq.n	8000ae8 <HAL_GPIO_Init+0x40>
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d130      	bne.n	8000b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2203      	movs	r2, #3
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1e:	2201      	movs	r2, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	091b      	lsrs	r3, r3, #4
 8000b34:	f003 0201 	and.w	r2, r3, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d017      	beq.n	8000b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d123      	bne.n	8000bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	08da      	lsrs	r2, r3, #3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3208      	adds	r2, #8
 8000bd4:	6939      	ldr	r1, [r7, #16]
 8000bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0203 	and.w	r2, r3, #3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 809a 	beq.w	8000d50 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1c:	4b55      	ldr	r3, [pc, #340]	@ (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a54      	ldr	r2, [pc, #336]	@ (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b52      	ldr	r3, [pc, #328]	@ (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c34:	4a50      	ldr	r2, [pc, #320]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c5e:	d013      	beq.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a46      	ldr	r2, [pc, #280]	@ (8000d7c <HAL_GPIO_Init+0x2d4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d00d      	beq.n	8000c84 <HAL_GPIO_Init+0x1dc>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a45      	ldr	r2, [pc, #276]	@ (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0x1d8>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a44      	ldr	r2, [pc, #272]	@ (8000d84 <HAL_GPIO_Init+0x2dc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d101      	bne.n	8000c7c <HAL_GPIO_Init+0x1d4>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c9a:	4937      	ldr	r1, [pc, #220]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca8:	4b37      	ldr	r3, [pc, #220]	@ (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cf6:	4a24      	ldr	r2, [pc, #144]	@ (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d20:	4a19      	ldr	r2, [pc, #100]	@ (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f aea9 	bne.w	8000ab8 <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	40010400 	.word	0x40010400

08000d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d9c:	787b      	ldrb	r3, [r7, #1]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000daa:	887a      	ldrh	r2, [r7, #2]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dcc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f001 b823 	b.w	8001e28 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 817d 	beq.w	80010f2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000df8:	4bbc      	ldr	r3, [pc, #752]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 030c 	and.w	r3, r3, #12
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d00c      	beq.n	8000e1e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e04:	4bb9      	ldr	r3, [pc, #740]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d15c      	bne.n	8000eca <HAL_RCC_OscConfig+0x10e>
 8000e10:	4bb6      	ldr	r3, [pc, #728]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e1c:	d155      	bne.n	8000eca <HAL_RCC_OscConfig+0x10e>
 8000e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e22:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e36:	fab3 f383 	clz	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	095b      	lsrs	r3, r3, #5
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d102      	bne.n	8000e50 <HAL_RCC_OscConfig+0x94>
 8000e4a:	4ba8      	ldr	r3, [pc, #672]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	e015      	b.n	8000e7c <HAL_RCC_OscConfig+0xc0>
 8000e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e54:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e58:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000e5c:	fa93 f3a3 	rbit	r3, r3
 8000e60:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e68:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e6c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000e70:	fa93 f3a3 	rbit	r3, r3
 8000e74:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000e78:	4b9c      	ldr	r3, [pc, #624]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e80:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000e84:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e88:	fa92 f2a2 	rbit	r2, r2
 8000e8c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000e90:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000e94:	fab2 f282 	clz	r2, r2
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	f042 0220 	orr.w	r2, r2, #32
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	f002 021f 	and.w	r2, r2, #31
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 811f 	beq.w	80010f0 <HAL_RCC_OscConfig+0x334>
 8000eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8116 	bne.w	80010f0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	f000 bfaf 	b.w	8001e28 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eda:	d106      	bne.n	8000eea <HAL_RCC_OscConfig+0x12e>
 8000edc:	4b83      	ldr	r3, [pc, #524]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a82      	ldr	r2, [pc, #520]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e036      	b.n	8000f58 <HAL_RCC_OscConfig+0x19c>
 8000eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x158>
 8000efa:	4b7c      	ldr	r3, [pc, #496]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a7b      	ldr	r2, [pc, #492]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b79      	ldr	r3, [pc, #484]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a78      	ldr	r2, [pc, #480]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e021      	b.n	8000f58 <HAL_RCC_OscConfig+0x19c>
 8000f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f24:	d10c      	bne.n	8000f40 <HAL_RCC_OscConfig+0x184>
 8000f26:	4b71      	ldr	r3, [pc, #452]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a70      	ldr	r2, [pc, #448]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b6e      	ldr	r3, [pc, #440]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a6d      	ldr	r2, [pc, #436]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e00b      	b.n	8000f58 <HAL_RCC_OscConfig+0x19c>
 8000f40:	4b6a      	ldr	r3, [pc, #424]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a69      	ldr	r2, [pc, #420]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b67      	ldr	r3, [pc, #412]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a66      	ldr	r2, [pc, #408]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f56:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f58:	4b64      	ldr	r3, [pc, #400]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5c:	f023 020f 	bic.w	r2, r3, #15
 8000f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	495f      	ldr	r1, [pc, #380]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d059      	beq.n	8001036 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fc7b 	bl	800087c <HAL_GetTick>
 8000f86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	e00a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fc76 	bl	800087c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b64      	cmp	r3, #100	@ 0x64
 8000f9a:	d902      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	f000 bf43 	b.w	8001e28 <HAL_RCC_OscConfig+0x106c>
 8000fa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fa6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000fb6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	fab3 f383 	clz	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	095b      	lsrs	r3, r3, #5
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d102      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x218>
 8000fce:	4b47      	ldr	r3, [pc, #284]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	e015      	b.n	8001000 <HAL_RCC_OscConfig+0x244>
 8000fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fd8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fdc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000fe0:	fa93 f3a3 	rbit	r3, r3
 8000fe4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000fe8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000ff0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001000:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001004:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001008:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800100c:	fa92 f2a2 	rbit	r2, r2
 8001010:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001014:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001018:	fab2 f282 	clz	r2, r2
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	f042 0220 	orr.w	r2, r2, #32
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	f002 021f 	and.w	r2, r2, #31
 8001028:	2101      	movs	r1, #1
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	4013      	ands	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0ab      	beq.n	8000f8c <HAL_RCC_OscConfig+0x1d0>
 8001034:	e05d      	b.n	80010f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fc21 	bl	800087c <HAL_GetTick>
 800103a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	e00a      	b.n	8001056 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fc1c 	bl	800087c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b64      	cmp	r3, #100	@ 0x64
 800104e:	d902      	bls.n	8001056 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	f000 bee9 	b.w	8001e28 <HAL_RCC_OscConfig+0x106c>
 8001056:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800105a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001062:	fa93 f3a3 	rbit	r3, r3
 8001066:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800106a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	fab3 f383 	clz	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	095b      	lsrs	r3, r3, #5
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d102      	bne.n	8001088 <HAL_RCC_OscConfig+0x2cc>
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	e015      	b.n	80010b4 <HAL_RCC_OscConfig+0x2f8>
 8001088:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800108c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800109c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010a0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80010a4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80010a8:	fa93 f3a3 	rbit	r3, r3
 80010ac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <HAL_RCC_OscConfig+0x330>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010b8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80010bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80010c0:	fa92 f2a2 	rbit	r2, r2
 80010c4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80010c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	f042 0220 	orr.w	r2, r2, #32
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	f002 021f 	and.w	r2, r2, #31
 80010dc:	2101      	movs	r1, #1
 80010de:	fa01 f202 	lsl.w	r2, r1, r2
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ab      	bne.n	8001040 <HAL_RCC_OscConfig+0x284>
 80010e8:	e003      	b.n	80010f2 <HAL_RCC_OscConfig+0x336>
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 817d 	beq.w	8001402 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001108:	4ba6      	ldr	r3, [pc, #664]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001114:	4ba3      	ldr	r3, [pc, #652]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	2b08      	cmp	r3, #8
 800111e:	d172      	bne.n	8001206 <HAL_RCC_OscConfig+0x44a>
 8001120:	4ba0      	ldr	r3, [pc, #640]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d16c      	bne.n	8001206 <HAL_RCC_OscConfig+0x44a>
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800113e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	095b      	lsrs	r3, r3, #5
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x3a0>
 8001156:	4b93      	ldr	r3, [pc, #588]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	e013      	b.n	8001184 <HAL_RCC_OscConfig+0x3c8>
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001174:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001180:	4b88      	ldr	r3, [pc, #544]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001184:	2202      	movs	r2, #2
 8001186:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800118a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800118e:	fa92 f2a2 	rbit	r2, r2
 8001192:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001196:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800119a:	fab2 f282 	clz	r2, r2
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	f042 0220 	orr.w	r2, r2, #32
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	f002 021f 	and.w	r2, r2, #31
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00a      	beq.n	80011cc <HAL_RCC_OscConfig+0x410>
 80011b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d002      	beq.n	80011cc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f000 be2e 	b.w	8001e28 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b75      	ldr	r3, [pc, #468]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	21f8      	movs	r1, #248	@ 0xf8
 80011e2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80011ea:	fa91 f1a1 	rbit	r1, r1
 80011ee:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80011f2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80011f6:	fab1 f181 	clz	r1, r1
 80011fa:	b2c9      	uxtb	r1, r1
 80011fc:	408b      	lsls	r3, r1
 80011fe:	4969      	ldr	r1, [pc, #420]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001204:	e0fd      	b.n	8001402 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800120a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8088 	beq.w	8001328 <HAL_RCC_OscConfig+0x56c>
 8001218:	2301      	movs	r3, #1
 800121a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800122a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122e:	fab3 f383 	clz	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001238:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	461a      	mov	r2, r3
 8001240:	2301      	movs	r3, #1
 8001242:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fb1a 	bl	800087c <HAL_GetTick>
 8001248:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	e00a      	b.n	8001264 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fb15 	bl	800087c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d902      	bls.n	8001264 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	f000 bde2 	b.w	8001e28 <HAL_RCC_OscConfig+0x106c>
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001276:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127a:	fab3 f383 	clz	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	095b      	lsrs	r3, r3, #5
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HAL_RCC_OscConfig+0x4d8>
 800128e:	4b45      	ldr	r3, [pc, #276]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	e013      	b.n	80012bc <HAL_RCC_OscConfig+0x500>
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80012b8:	4b3a      	ldr	r3, [pc, #232]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 80012ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012bc:	2202      	movs	r2, #2
 80012be:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80012c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80012c6:	fa92 f2a2 	rbit	r2, r2
 80012ca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80012ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80012d2:	fab2 f282 	clz	r2, r2
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	f042 0220 	orr.w	r2, r2, #32
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	f002 021f 	and.w	r2, r2, #31
 80012e2:	2101      	movs	r1, #1
 80012e4:	fa01 f202 	lsl.w	r2, r1, r2
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0af      	beq.n	800124e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	21f8      	movs	r1, #248	@ 0xf8
 8001304:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800130c:	fa91 f1a1 	rbit	r1, r1
 8001310:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001314:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001318:	fab1 f181 	clz	r1, r1
 800131c:	b2c9      	uxtb	r1, r1
 800131e:	408b      	lsls	r3, r1
 8001320:	4920      	ldr	r1, [pc, #128]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
 8001326:	e06c      	b.n	8001402 <HAL_RCC_OscConfig+0x646>
 8001328:	2301      	movs	r3, #1
 800132a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800133a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001348:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	461a      	mov	r2, r3
 8001350:	2300      	movs	r3, #0
 8001352:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fa92 	bl	800087c <HAL_GetTick>
 8001358:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff fa8d 	bl	800087c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d902      	bls.n	8001374 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	f000 bd5a 	b.w	8001e28 <HAL_RCC_OscConfig+0x106c>
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001386:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	095b      	lsrs	r3, r3, #5
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d104      	bne.n	80013a8 <HAL_RCC_OscConfig+0x5ec>
 800139e:	4b01      	ldr	r3, [pc, #4]	@ (80013a4 <HAL_RCC_OscConfig+0x5e8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	e015      	b.n	80013d0 <HAL_RCC_OscConfig+0x614>
 80013a4:	40021000 	.word	0x40021000
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013b2:	fa93 f3a3 	rbit	r3, r3
 80013b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80013c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013cc:	4bc8      	ldr	r3, [pc, #800]	@ (80016f0 <HAL_RCC_OscConfig+0x934>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d0:	2202      	movs	r2, #2
 80013d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80013d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013da:	fa92 f2a2 	rbit	r2, r2
 80013de:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80013e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80013e6:	fab2 f282 	clz	r2, r2
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	f042 0220 	orr.w	r2, r2, #32
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	f002 021f 	and.w	r2, r2, #31
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1ad      	bne.n	800135e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8110 	beq.w	8001638 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d079      	beq.n	800151c <HAL_RCC_OscConfig+0x760>
 8001428:	2301      	movs	r3, #1
 800142a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800143a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4bab      	ldr	r3, [pc, #684]	@ (80016f4 <HAL_RCC_OscConfig+0x938>)
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	461a      	mov	r2, r3
 800144e:	2301      	movs	r3, #1
 8001450:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fa13 	bl	800087c <HAL_GetTick>
 8001456:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fa0e 	bl	800087c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d902      	bls.n	8001472 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	f000 bcdb 	b.w	8001e28 <HAL_RCC_OscConfig+0x106c>
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800147c:	fa93 f3a3 	rbit	r3, r3
 8001480:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001488:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800148c:	2202      	movs	r2, #2
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001494:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f2a3 	rbit	r2, r3
 800149e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014b0:	2202      	movs	r2, #2
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014cc:	4b88      	ldr	r3, [pc, #544]	@ (80016f0 <HAL_RCC_OscConfig+0x934>)
 80014ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014d8:	2102      	movs	r1, #2
 80014da:	6019      	str	r1, [r3, #0]
 80014dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	fa93 f1a3 	rbit	r1, r3
 80014ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014f2:	6019      	str	r1, [r3, #0]
  return result;
 80014f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0a0      	beq.n	800145c <HAL_RCC_OscConfig+0x6a0>
 800151a:	e08d      	b.n	8001638 <HAL_RCC_OscConfig+0x87c>
 800151c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001520:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fa93 f2a3 	rbit	r2, r3
 8001536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800153e:	601a      	str	r2, [r3, #0]
  return result;
 8001540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001544:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001548:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4b68      	ldr	r3, [pc, #416]	@ (80016f4 <HAL_RCC_OscConfig+0x938>)
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	461a      	mov	r2, r3
 800155a:	2300      	movs	r3, #0
 800155c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff f98d 	bl	800087c <HAL_GetTick>
 8001562:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff f988 	bl	800087c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d902      	bls.n	800157e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	f000 bc55 	b.w	8001e28 <HAL_RCC_OscConfig+0x106c>
 800157e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001582:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015aa:	2202      	movs	r2, #2
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	fa93 f2a3 	rbit	r2, r3
 80015bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015ce:	2202      	movs	r2, #2
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fa93 f2a3 	rbit	r2, r3
 80015e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ea:	4b41      	ldr	r3, [pc, #260]	@ (80016f0 <HAL_RCC_OscConfig+0x934>)
 80015ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015f6:	2102      	movs	r1, #2
 80015f8:	6019      	str	r1, [r3, #0]
 80015fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fa93 f1a3 	rbit	r1, r3
 8001608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001610:	6019      	str	r1, [r3, #0]
  return result;
 8001612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001616:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d197      	bne.n	8001568 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 81a1 	beq.w	8001990 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001654:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <HAL_RCC_OscConfig+0x934>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d116      	bne.n	800168e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <HAL_RCC_OscConfig+0x934>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <HAL_RCC_OscConfig+0x934>)
 8001666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166a:	61d3      	str	r3, [r2, #28]
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <HAL_RCC_OscConfig+0x934>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001678:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001682:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001686:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001688:	2301      	movs	r3, #1
 800168a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <HAL_RCC_OscConfig+0x93c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d11a      	bne.n	80016d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <HAL_RCC_OscConfig+0x93c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a16      	ldr	r2, [pc, #88]	@ (80016f8 <HAL_RCC_OscConfig+0x93c>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7ff f8e9 	bl	800087c <HAL_GetTick>
 80016aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	e009      	b.n	80016c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b0:	f7ff f8e4 	bl	800087c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b64      	cmp	r3, #100	@ 0x64
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e3b1      	b.n	8001e28 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <HAL_RCC_OscConfig+0x93c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0ef      	beq.n	80016b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d10d      	bne.n	80016fc <HAL_RCC_OscConfig+0x940>
 80016e0:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <HAL_RCC_OscConfig+0x934>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a02      	ldr	r2, [pc, #8]	@ (80016f0 <HAL_RCC_OscConfig+0x934>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	e03c      	b.n	8001768 <HAL_RCC_OscConfig+0x9ac>
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	10908120 	.word	0x10908120
 80016f8:	40007000 	.word	0x40007000
 80016fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10c      	bne.n	8001726 <HAL_RCC_OscConfig+0x96a>
 800170c:	4bc1      	ldr	r3, [pc, #772]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	4ac0      	ldr	r2, [pc, #768]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6213      	str	r3, [r2, #32]
 8001718:	4bbe      	ldr	r3, [pc, #760]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	4abd      	ldr	r2, [pc, #756]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 800171e:	f023 0304 	bic.w	r3, r3, #4
 8001722:	6213      	str	r3, [r2, #32]
 8001724:	e020      	b.n	8001768 <HAL_RCC_OscConfig+0x9ac>
 8001726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b05      	cmp	r3, #5
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x994>
 8001736:	4bb7      	ldr	r3, [pc, #732]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4ab6      	ldr	r2, [pc, #728]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4bb4      	ldr	r3, [pc, #720]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4ab3      	ldr	r2, [pc, #716]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0x9ac>
 8001750:	4bb0      	ldr	r3, [pc, #704]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4aaf      	ldr	r2, [pc, #700]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001756:	f023 0301 	bic.w	r3, r3, #1
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	4bad      	ldr	r3, [pc, #692]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4aac      	ldr	r2, [pc, #688]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 8081 	beq.w	800187c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff f87f 	bl	800087c <HAL_GetTick>
 800177e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff f87a 	bl	800087c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e345      	b.n	8001e28 <HAL_RCC_OscConfig+0x106c>
 800179c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017c8:	2202      	movs	r2, #2
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	fa93 f2a3 	rbit	r2, r3
 80017da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017e2:	601a      	str	r2, [r3, #0]
  return result;
 80017e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d102      	bne.n	8001808 <HAL_RCC_OscConfig+0xa4c>
 8001802:	4b84      	ldr	r3, [pc, #528]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	e013      	b.n	8001830 <HAL_RCC_OscConfig+0xa74>
 8001808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001810:	2202      	movs	r2, #2
 8001812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001818:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001826:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	4b79      	ldr	r3, [pc, #484]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001830:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001834:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001838:	2102      	movs	r1, #2
 800183a:	6011      	str	r1, [r2, #0]
 800183c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001840:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	fa92 f1a2 	rbit	r1, r2
 800184a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800184e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001852:	6011      	str	r1, [r2, #0]
  return result;
 8001854:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001858:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	fab2 f282 	clz	r2, r2
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	f002 021f 	and.w	r2, r2, #31
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d084      	beq.n	8001784 <HAL_RCC_OscConfig+0x9c8>
 800187a:	e07f      	b.n	800197c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7fe fffe 	bl	800087c <HAL_GetTick>
 8001880:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	e00b      	b.n	800189e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7fe fff9 	bl	800087c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e2c4      	b.n	8001e28 <HAL_RCC_OscConfig+0x106c>
 800189e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018a6:	2202      	movs	r2, #2
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018ca:	2202      	movs	r2, #2
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018e4:	601a      	str	r2, [r3, #0]
  return result;
 80018e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d102      	bne.n	800190a <HAL_RCC_OscConfig+0xb4e>
 8001904:	4b43      	ldr	r3, [pc, #268]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	e013      	b.n	8001932 <HAL_RCC_OscConfig+0xb76>
 800190a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001912:	2202      	movs	r2, #2
 8001914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001928:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001936:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800193a:	2102      	movs	r1, #2
 800193c:	6011      	str	r1, [r2, #0]
 800193e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001942:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	fa92 f1a2 	rbit	r1, r2
 800194c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001950:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001954:	6011      	str	r1, [r2, #0]
  return result;
 8001956:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800195a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	fab2 f282 	clz	r2, r2
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f002 021f 	and.w	r2, r2, #31
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d184      	bne.n	8001886 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800197c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001984:	4b23      	ldr	r3, [pc, #140]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	4a22      	ldr	r2, [pc, #136]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 800198a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800198e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 8242 	beq.w	8001e26 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <HAL_RCC_OscConfig+0xc58>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	f000 8213 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	f040 8162 	bne.w	8001c86 <HAL_RCC_OscConfig+0xeca>
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	fa93 f2a3 	rbit	r2, r3
 80019de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019e6:	601a      	str	r2, [r3, #0]
  return result;
 80019e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	461a      	mov	r2, r3
 8001a04:	2300      	movs	r3, #0
 8001a06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7fe ff38 	bl	800087c <HAL_GetTick>
 8001a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a10:	e00c      	b.n	8001a2c <HAL_RCC_OscConfig+0xc70>
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7fe ff30 	bl	800087c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1fd      	b.n	8001e28 <HAL_RCC_OscConfig+0x106c>
 8001a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a30:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a50:	601a      	str	r2, [r3, #0]
  return result;
 8001a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a56:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d102      	bne.n	8001a76 <HAL_RCC_OscConfig+0xcba>
 8001a70:	4bb0      	ldr	r3, [pc, #704]	@ (8001d34 <HAL_RCC_OscConfig+0xf78>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	e027      	b.n	8001ac6 <HAL_RCC_OscConfig+0xd0a>
 8001a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	fa93 f2a3 	rbit	r2, r3
 8001a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a96:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8001d34 <HAL_RCC_OscConfig+0xf78>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ace:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ad2:	6011      	str	r1, [r2, #0]
 8001ad4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ad8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	fa92 f1a2 	rbit	r1, r2
 8001ae2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ae6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001aea:	6011      	str	r1, [r2, #0]
  return result;
 8001aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001af0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f042 0220 	orr.w	r2, r2, #32
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f002 021f 	and.w	r2, r2, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d182      	bne.n	8001a18 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b12:	4b88      	ldr	r3, [pc, #544]	@ (8001d34 <HAL_RCC_OscConfig+0xf78>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	430b      	orrs	r3, r1
 8001b34:	497f      	ldr	r1, [pc, #508]	@ (8001d34 <HAL_RCC_OscConfig+0xf78>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fa93 f2a3 	rbit	r2, r3
 8001b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b5e:	601a      	str	r2, [r3, #0]
  return result;
 8001b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b64:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b68:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe fe7c 	bl	800087c <HAL_GetTick>
 8001b84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b88:	e009      	b.n	8001b9e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7fe fe77 	bl	800087c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e144      	b.n	8001e28 <HAL_RCC_OscConfig+0x106c>
 8001b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bc2:	601a      	str	r2, [r3, #0]
  return result;
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	095b      	lsrs	r3, r3, #5
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <HAL_RCC_OscConfig+0xe2c>
 8001be2:	4b54      	ldr	r3, [pc, #336]	@ (8001d34 <HAL_RCC_OscConfig+0xf78>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	e027      	b.n	8001c38 <HAL_RCC_OscConfig+0xe7c>
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c20:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	4b3f      	ldr	r3, [pc, #252]	@ (8001d34 <HAL_RCC_OscConfig+0xf78>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c3c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c44:	6011      	str	r1, [r2, #0]
 8001c46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c4a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	fa92 f1a2 	rbit	r1, r2
 8001c54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c58:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c5c:	6011      	str	r1, [r2, #0]
  return result;
 8001c5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c62:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	fab2 f282 	clz	r2, r2
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f042 0220 	orr.w	r2, r2, #32
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f002 021f 	and.w	r2, r2, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d082      	beq.n	8001b8a <HAL_RCC_OscConfig+0xdce>
 8001c84:	e0cf      	b.n	8001e26 <HAL_RCC_OscConfig+0x106a>
 8001c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001caa:	601a      	str	r2, [r3, #0]
  return result;
 8001cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fdd6 	bl	800087c <HAL_GetTick>
 8001cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	e009      	b.n	8001cea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7fe fdd1 	bl	800087c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e09e      	b.n	8001e28 <HAL_RCC_OscConfig+0x106c>
 8001cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cf2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d0e:	601a      	str	r2, [r3, #0]
  return result;
 8001d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d14:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	095b      	lsrs	r3, r3, #5
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d104      	bne.n	8001d38 <HAL_RCC_OscConfig+0xf7c>
 8001d2e:	4b01      	ldr	r3, [pc, #4]	@ (8001d34 <HAL_RCC_OscConfig+0xf78>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	e029      	b.n	8001d88 <HAL_RCC_OscConfig+0xfcc>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fa93 f2a3 	rbit	r2, r3
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d62:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <HAL_RCC_OscConfig+0x1078>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d8c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d90:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d94:	6011      	str	r1, [r2, #0]
 8001d96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d9a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	fa92 f1a2 	rbit	r1, r2
 8001da4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001da8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001dac:	6011      	str	r1, [r2, #0]
  return result;
 8001dae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001db2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	fab2 f282 	clz	r2, r2
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	f042 0220 	orr.w	r2, r2, #32
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	f002 021f 	and.w	r2, r2, #31
 8001dc8:	2101      	movs	r1, #1
 8001dca:	fa01 f202 	lsl.w	r2, r1, r2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d180      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xf1a>
 8001dd4:	e027      	b.n	8001e26 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e01e      	b.n	8001e28 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_RCC_OscConfig+0x1078>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001df2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001df6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d10b      	bne.n	8001e22 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001e0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b09e      	sub	sp, #120	@ 0x78
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e162      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b90      	ldr	r3, [pc, #576]	@ (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d910      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 0207 	bic.w	r2, r3, #7
 8001e66:	498b      	ldr	r1, [pc, #556]	@ (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b89      	ldr	r3, [pc, #548]	@ (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e14a      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b82      	ldr	r3, [pc, #520]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	497f      	ldr	r1, [pc, #508]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80dc 	beq.w	8002064 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d13c      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xf6>
 8001eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_ClockConfig+0xa6>
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	e00f      	b.n	8001efe <HAL_RCC_ClockConfig+0xc6>
 8001ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8001eec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001efa:	4b67      	ldr	r3, [pc, #412]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f02:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001f0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f0e:	fab2 f282 	clz	r2, r2
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f042 0220 	orr.w	r2, r2, #32
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f002 021f 	and.w	r2, r2, #31
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f202 	lsl.w	r2, r1, r2
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d17b      	bne.n	8002022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0f3      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d13c      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x178>
 8001f36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f3a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x128>
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	e00f      	b.n	8001f80 <HAL_RCC_ClockConfig+0x148>
 8001f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f7c:	4b46      	ldr	r3, [pc, #280]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f84:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f88:	fa92 f2a2 	rbit	r2, r2
 8001f8c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d13a      	bne.n	8002022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b2      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	095b      	lsrs	r3, r3, #5
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x1a0>
 8001fd2:	4b31      	ldr	r3, [pc, #196]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	e00d      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1bc>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	4b29      	ldr	r3, [pc, #164]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	61ba      	str	r2, [r7, #24]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	fa92 f2a2 	rbit	r2, r2
 8001ffe:	617a      	str	r2, [r7, #20]
  return result;
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e079      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	491a      	ldr	r1, [pc, #104]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7fe fc22 	bl	800087c <HAL_GetTick>
 8002038:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe fc1e 	bl	800087c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e061      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_RCC_ClockConfig+0x260>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d214      	bcs.n	800209c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4906      	ldr	r1, [pc, #24]	@ (8002094 <HAL_RCC_ClockConfig+0x25c>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e040      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
 8002094:	40022000 	.word	0x40022000
 8002098:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	491a      	ldr	r1, [pc, #104]	@ (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c6:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4912      	ldr	r1, [pc, #72]	@ (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020da:	f000 f829 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020de:	4601      	mov	r1, r0
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020e8:	22f0      	movs	r2, #240	@ 0xf0
 80020ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	fa92 f2a2 	rbit	r2, r2
 80020f2:	60fa      	str	r2, [r7, #12]
  return result;
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	fab2 f282 	clz	r2, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	40d3      	lsrs	r3, r2
 80020fe:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <HAL_RCC_ClockConfig+0x2ec>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	fa21 f303 	lsr.w	r3, r1, r3
 8002106:	4a08      	ldr	r2, [pc, #32]	@ (8002128 <HAL_RCC_ClockConfig+0x2f0>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800210a:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_RCC_ClockConfig+0x2f4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fb70 	bl	80007f4 <HAL_InitTick>
  
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3778      	adds	r7, #120	@ 0x78
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	08003968 	.word	0x08003968
 8002128:	20000000 	.word	0x20000000
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d002      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x30>
 800215a:	2b08      	cmp	r3, #8
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x36>
 800215e:	e026      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002162:	613b      	str	r3, [r7, #16]
      break;
 8002164:	e026      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a17      	ldr	r2, [pc, #92]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	4a14      	ldr	r2, [pc, #80]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800218c:	4a0e      	ldr	r2, [pc, #56]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	fbb2 f2f3 	udiv	r2, r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e004      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a0c      	ldr	r2, [pc, #48]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
      break;
 80021ac:	e002      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021b0:	613b      	str	r3, [r7, #16]
      break;
 80021b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b4:	693b      	ldr	r3, [r7, #16]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	08003980 	.word	0x08003980
 80021d0:	08003990 	.word	0x08003990
 80021d4:	003d0900 	.word	0x003d0900

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_RCC_GetHCLKFreq+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021f6:	f7ff ffef 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021fa:	4601      	mov	r1, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002204:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002208:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	fa92 f2a2 	rbit	r2, r2
 8002210:	603a      	str	r2, [r7, #0]
  return result;
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	fab2 f282 	clz	r2, r2
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	40d3      	lsrs	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <HAL_RCC_GetPCLK1Freq+0x40>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08003978 	.word	0x08003978

08002234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800223a:	f7ff ffcd 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 800223e:	4601      	mov	r1, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002248:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800224c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	fa92 f2a2 	rbit	r2, r2
 8002254:	603a      	str	r2, [r7, #0]
  return result;
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	fab2 f282 	clz	r2, r2
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	40d3      	lsrs	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	08003978 	.word	0x08003978

08002278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e040      	b.n	800230c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe f944 	bl	8000528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	@ 0x24
 80022a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f9e8 	bl	8002694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f8af 	bl	8002428 <UART_SetConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e01b      	b.n	800230c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fa67 	bl	80027d8 <UART_CheckIdleState>
 800230a:	4603      	mov	r3, r0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002328:	2b20      	cmp	r3, #32
 800232a:	d177      	bne.n	800241c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_UART_Transmit+0x24>
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e070      	b.n	800241e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2221      	movs	r2, #33	@ 0x21
 8002348:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800234a:	f7fe fa97 	bl	800087c <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002368:	d108      	bne.n	800237c <HAL_UART_Transmit+0x68>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d104      	bne.n	800237c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	e003      	b.n	8002384 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002384:	e02f      	b.n	80023e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2200      	movs	r2, #0
 800238e:	2180      	movs	r1, #128	@ 0x80
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fac9 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e03b      	b.n	800241e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	881a      	ldrh	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b8:	b292      	uxth	r2, r2
 80023ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	3302      	adds	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	e007      	b.n	80023d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1c9      	bne.n	8002386 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2140      	movs	r1, #64	@ 0x40
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fa93 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e005      	b.n	800241e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	e000      	b.n	800241e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b8a      	ldr	r3, [pc, #552]	@ (800267c <UART_SetConfig+0x254>)
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	6979      	ldr	r1, [r7, #20]
 800245c:	430b      	orrs	r3, r1
 800245e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a78      	ldr	r2, [pc, #480]	@ (8002680 <UART_SetConfig+0x258>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d120      	bne.n	80024e6 <UART_SetConfig+0xbe>
 80024a4:	4b77      	ldr	r3, [pc, #476]	@ (8002684 <UART_SetConfig+0x25c>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d817      	bhi.n	80024e0 <UART_SetConfig+0xb8>
 80024b0:	a201      	add	r2, pc, #4	@ (adr r2, 80024b8 <UART_SetConfig+0x90>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024d5 	.word	0x080024d5
 80024c0:	080024db 	.word	0x080024db
 80024c4:	080024cf 	.word	0x080024cf
 80024c8:	2300      	movs	r3, #0
 80024ca:	77fb      	strb	r3, [r7, #31]
 80024cc:	e01d      	b.n	800250a <UART_SetConfig+0xe2>
 80024ce:	2302      	movs	r3, #2
 80024d0:	77fb      	strb	r3, [r7, #31]
 80024d2:	e01a      	b.n	800250a <UART_SetConfig+0xe2>
 80024d4:	2304      	movs	r3, #4
 80024d6:	77fb      	strb	r3, [r7, #31]
 80024d8:	e017      	b.n	800250a <UART_SetConfig+0xe2>
 80024da:	2308      	movs	r3, #8
 80024dc:	77fb      	strb	r3, [r7, #31]
 80024de:	e014      	b.n	800250a <UART_SetConfig+0xe2>
 80024e0:	2310      	movs	r3, #16
 80024e2:	77fb      	strb	r3, [r7, #31]
 80024e4:	e011      	b.n	800250a <UART_SetConfig+0xe2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a67      	ldr	r2, [pc, #412]	@ (8002688 <UART_SetConfig+0x260>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d102      	bne.n	80024f6 <UART_SetConfig+0xce>
 80024f0:	2300      	movs	r3, #0
 80024f2:	77fb      	strb	r3, [r7, #31]
 80024f4:	e009      	b.n	800250a <UART_SetConfig+0xe2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a64      	ldr	r2, [pc, #400]	@ (800268c <UART_SetConfig+0x264>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d102      	bne.n	8002506 <UART_SetConfig+0xde>
 8002500:	2300      	movs	r3, #0
 8002502:	77fb      	strb	r3, [r7, #31]
 8002504:	e001      	b.n	800250a <UART_SetConfig+0xe2>
 8002506:	2310      	movs	r3, #16
 8002508:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002512:	d15a      	bne.n	80025ca <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002514:	7ffb      	ldrb	r3, [r7, #31]
 8002516:	2b08      	cmp	r3, #8
 8002518:	d827      	bhi.n	800256a <UART_SetConfig+0x142>
 800251a:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <UART_SetConfig+0xf8>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	08002545 	.word	0x08002545
 8002524:	0800254d 	.word	0x0800254d
 8002528:	08002555 	.word	0x08002555
 800252c:	0800256b 	.word	0x0800256b
 8002530:	0800255b 	.word	0x0800255b
 8002534:	0800256b 	.word	0x0800256b
 8002538:	0800256b 	.word	0x0800256b
 800253c:	0800256b 	.word	0x0800256b
 8002540:	08002563 	.word	0x08002563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002544:	f7ff fe54 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8002548:	61b8      	str	r0, [r7, #24]
        break;
 800254a:	e013      	b.n	8002574 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800254c:	f7ff fe72 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8002550:	61b8      	str	r0, [r7, #24]
        break;
 8002552:	e00f      	b.n	8002574 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002554:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <UART_SetConfig+0x268>)
 8002556:	61bb      	str	r3, [r7, #24]
        break;
 8002558:	e00c      	b.n	8002574 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800255a:	f7ff fde9 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 800255e:	61b8      	str	r0, [r7, #24]
        break;
 8002560:	e008      	b.n	8002574 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002566:	61bb      	str	r3, [r7, #24]
        break;
 8002568:	e004      	b.n	8002574 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	77bb      	strb	r3, [r7, #30]
        break;
 8002572:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d074      	beq.n	8002664 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	005a      	lsls	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	441a      	add	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	d916      	bls.n	80025c4 <UART_SetConfig+0x19c>
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800259c:	d212      	bcs.n	80025c4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f023 030f 	bic.w	r3, r3, #15
 80025a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	89fb      	ldrh	r3, [r7, #14]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	89fa      	ldrh	r2, [r7, #14]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	e04f      	b.n	8002664 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	77bb      	strb	r3, [r7, #30]
 80025c8:	e04c      	b.n	8002664 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d828      	bhi.n	8002622 <UART_SetConfig+0x1fa>
 80025d0:	a201      	add	r2, pc, #4	@ (adr r2, 80025d8 <UART_SetConfig+0x1b0>)
 80025d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d6:	bf00      	nop
 80025d8:	080025fd 	.word	0x080025fd
 80025dc:	08002605 	.word	0x08002605
 80025e0:	0800260d 	.word	0x0800260d
 80025e4:	08002623 	.word	0x08002623
 80025e8:	08002613 	.word	0x08002613
 80025ec:	08002623 	.word	0x08002623
 80025f0:	08002623 	.word	0x08002623
 80025f4:	08002623 	.word	0x08002623
 80025f8:	0800261b 	.word	0x0800261b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025fc:	f7ff fdf8 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8002600:	61b8      	str	r0, [r7, #24]
        break;
 8002602:	e013      	b.n	800262c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002604:	f7ff fe16 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8002608:	61b8      	str	r0, [r7, #24]
        break;
 800260a:	e00f      	b.n	800262c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <UART_SetConfig+0x268>)
 800260e:	61bb      	str	r3, [r7, #24]
        break;
 8002610:	e00c      	b.n	800262c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002612:	f7ff fd8d 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8002616:	61b8      	str	r0, [r7, #24]
        break;
 8002618:	e008      	b.n	800262c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800261a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800261e:	61bb      	str	r3, [r7, #24]
        break;
 8002620:	e004      	b.n	800262c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	77bb      	strb	r3, [r7, #30]
        break;
 800262a:	bf00      	nop
    }

    if (pclk != 0U)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d018      	beq.n	8002664 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	085a      	lsrs	r2, r3, #1
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	441a      	add	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	d909      	bls.n	8002660 <UART_SetConfig+0x238>
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002652:	d205      	bcs.n	8002660 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	e001      	b.n	8002664 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002670:	7fbb      	ldrb	r3, [r7, #30]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	efff69f3 	.word	0xefff69f3
 8002680:	40013800 	.word	0x40013800
 8002684:	40021000 	.word	0x40021000
 8002688:	40004400 	.word	0x40004400
 800268c:	40004800 	.word	0x40004800
 8002690:	007a1200 	.word	0x007a1200

08002694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01a      	beq.n	80027aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002792:	d10a      	bne.n	80027aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]
  }
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b098      	sub	sp, #96	@ 0x60
 80027dc:	af02      	add	r7, sp, #8
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027e8:	f7fe f848 	bl	800087c <HAL_GetTick>
 80027ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d12e      	bne.n	800285a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002804:	2200      	movs	r2, #0
 8002806:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f88c 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d021      	beq.n	800285a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281e:	e853 3f00 	ldrex	r3, [r3]
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800282a:	653b      	str	r3, [r7, #80]	@ 0x50
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002834:	647b      	str	r3, [r7, #68]	@ 0x44
 8002836:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800283a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e6      	bne.n	8002816 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e062      	b.n	8002920 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d149      	bne.n	80028fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002868:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002870:	2200      	movs	r2, #0
 8002872:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f856 	bl	8002928 <UART_WaitOnFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03c      	beq.n	80028fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	e853 3f00 	ldrex	r3, [r3]
 800288e:	623b      	str	r3, [r7, #32]
   return(result);
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028a8:	e841 2300 	strex	r3, r2, [r1]
 80028ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e6      	bne.n	8002882 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3308      	adds	r3, #8
 80028ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	e853 3f00 	ldrex	r3, [r3]
 80028c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3308      	adds	r3, #8
 80028d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028d4:	61fa      	str	r2, [r7, #28]
 80028d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d8:	69b9      	ldr	r1, [r7, #24]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	e841 2300 	strex	r3, r2, [r1]
 80028e0:	617b      	str	r3, [r7, #20]
   return(result);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e5      	bne.n	80028b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e011      	b.n	8002920 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3758      	adds	r7, #88	@ 0x58
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002938:	e04f      	b.n	80029da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d04b      	beq.n	80029da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002942:	f7fd ff9b 	bl	800087c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <UART_WaitOnFlagUntilTimeout+0x30>
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e04e      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d037      	beq.n	80029da <UART_WaitOnFlagUntilTimeout+0xb2>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b80      	cmp	r3, #128	@ 0x80
 800296e:	d034      	beq.n	80029da <UART_WaitOnFlagUntilTimeout+0xb2>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b40      	cmp	r3, #64	@ 0x40
 8002974:	d031      	beq.n	80029da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b08      	cmp	r3, #8
 8002982:	d110      	bne.n	80029a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2208      	movs	r2, #8
 800298a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f838 	bl	8002a02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2208      	movs	r2, #8
 8002996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e029      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029b4:	d111      	bne.n	80029da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f81e 	bl	8002a02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e00f      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69da      	ldr	r2, [r3, #28]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4013      	ands	r3, r2
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d0a0      	beq.n	800293a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b095      	sub	sp, #84	@ 0x54
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e6      	bne.n	8002a0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3308      	adds	r3, #8
 8002a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3308      	adds	r3, #8
 8002a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e5      	bne.n	8002a3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d118      	bne.n	8002aaa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f023 0310 	bic.w	r3, r3, #16
 8002a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	6979      	ldr	r1, [r7, #20]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	e841 2300 	strex	r3, r2, [r1]
 8002aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e6      	bne.n	8002a78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002abe:	bf00      	nop
 8002ac0:	3754      	adds	r7, #84	@ 0x54
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <std>:
 8002acc:	2300      	movs	r3, #0
 8002ace:	b510      	push	{r4, lr}
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ada:	6083      	str	r3, [r0, #8]
 8002adc:	8181      	strh	r1, [r0, #12]
 8002ade:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ae0:	81c2      	strh	r2, [r0, #14]
 8002ae2:	6183      	str	r3, [r0, #24]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	305c      	adds	r0, #92	@ 0x5c
 8002aea:	f000 f906 	bl	8002cfa <memset>
 8002aee:	4b0d      	ldr	r3, [pc, #52]	@ (8002b24 <std+0x58>)
 8002af0:	6263      	str	r3, [r4, #36]	@ 0x24
 8002af2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <std+0x5c>)
 8002af4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002af6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <std+0x60>)
 8002af8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <std+0x64>)
 8002afc:	6323      	str	r3, [r4, #48]	@ 0x30
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <std+0x68>)
 8002b00:	6224      	str	r4, [r4, #32]
 8002b02:	429c      	cmp	r4, r3
 8002b04:	d006      	beq.n	8002b14 <std+0x48>
 8002b06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b0a:	4294      	cmp	r4, r2
 8002b0c:	d002      	beq.n	8002b14 <std+0x48>
 8002b0e:	33d0      	adds	r3, #208	@ 0xd0
 8002b10:	429c      	cmp	r4, r3
 8002b12:	d105      	bne.n	8002b20 <std+0x54>
 8002b14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b1c:	f000 b966 	b.w	8002dec <__retarget_lock_init_recursive>
 8002b20:	bd10      	pop	{r4, pc}
 8002b22:	bf00      	nop
 8002b24:	08002c75 	.word	0x08002c75
 8002b28:	08002c97 	.word	0x08002c97
 8002b2c:	08002ccf 	.word	0x08002ccf
 8002b30:	08002cf3 	.word	0x08002cf3
 8002b34:	20000114 	.word	0x20000114

08002b38 <stdio_exit_handler>:
 8002b38:	4a02      	ldr	r2, [pc, #8]	@ (8002b44 <stdio_exit_handler+0xc>)
 8002b3a:	4903      	ldr	r1, [pc, #12]	@ (8002b48 <stdio_exit_handler+0x10>)
 8002b3c:	4803      	ldr	r0, [pc, #12]	@ (8002b4c <stdio_exit_handler+0x14>)
 8002b3e:	f000 b869 	b.w	8002c14 <_fwalk_sglue>
 8002b42:	bf00      	nop
 8002b44:	2000000c 	.word	0x2000000c
 8002b48:	0800368d 	.word	0x0800368d
 8002b4c:	2000001c 	.word	0x2000001c

08002b50 <cleanup_stdio>:
 8002b50:	6841      	ldr	r1, [r0, #4]
 8002b52:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <cleanup_stdio+0x34>)
 8002b54:	4299      	cmp	r1, r3
 8002b56:	b510      	push	{r4, lr}
 8002b58:	4604      	mov	r4, r0
 8002b5a:	d001      	beq.n	8002b60 <cleanup_stdio+0x10>
 8002b5c:	f000 fd96 	bl	800368c <_fflush_r>
 8002b60:	68a1      	ldr	r1, [r4, #8]
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <cleanup_stdio+0x38>)
 8002b64:	4299      	cmp	r1, r3
 8002b66:	d002      	beq.n	8002b6e <cleanup_stdio+0x1e>
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f000 fd8f 	bl	800368c <_fflush_r>
 8002b6e:	68e1      	ldr	r1, [r4, #12]
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <cleanup_stdio+0x3c>)
 8002b72:	4299      	cmp	r1, r3
 8002b74:	d004      	beq.n	8002b80 <cleanup_stdio+0x30>
 8002b76:	4620      	mov	r0, r4
 8002b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b7c:	f000 bd86 	b.w	800368c <_fflush_r>
 8002b80:	bd10      	pop	{r4, pc}
 8002b82:	bf00      	nop
 8002b84:	20000114 	.word	0x20000114
 8002b88:	2000017c 	.word	0x2000017c
 8002b8c:	200001e4 	.word	0x200001e4

08002b90 <global_stdio_init.part.0>:
 8002b90:	b510      	push	{r4, lr}
 8002b92:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <global_stdio_init.part.0+0x30>)
 8002b94:	4c0b      	ldr	r4, [pc, #44]	@ (8002bc4 <global_stdio_init.part.0+0x34>)
 8002b96:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc8 <global_stdio_init.part.0+0x38>)
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2104      	movs	r1, #4
 8002ba0:	f7ff ff94 	bl	8002acc <std>
 8002ba4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2109      	movs	r1, #9
 8002bac:	f7ff ff8e 	bl	8002acc <std>
 8002bb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bba:	2112      	movs	r1, #18
 8002bbc:	f7ff bf86 	b.w	8002acc <std>
 8002bc0:	2000024c 	.word	0x2000024c
 8002bc4:	20000114 	.word	0x20000114
 8002bc8:	08002b39 	.word	0x08002b39

08002bcc <__sfp_lock_acquire>:
 8002bcc:	4801      	ldr	r0, [pc, #4]	@ (8002bd4 <__sfp_lock_acquire+0x8>)
 8002bce:	f000 b90e 	b.w	8002dee <__retarget_lock_acquire_recursive>
 8002bd2:	bf00      	nop
 8002bd4:	20000255 	.word	0x20000255

08002bd8 <__sfp_lock_release>:
 8002bd8:	4801      	ldr	r0, [pc, #4]	@ (8002be0 <__sfp_lock_release+0x8>)
 8002bda:	f000 b909 	b.w	8002df0 <__retarget_lock_release_recursive>
 8002bde:	bf00      	nop
 8002be0:	20000255 	.word	0x20000255

08002be4 <__sinit>:
 8002be4:	b510      	push	{r4, lr}
 8002be6:	4604      	mov	r4, r0
 8002be8:	f7ff fff0 	bl	8002bcc <__sfp_lock_acquire>
 8002bec:	6a23      	ldr	r3, [r4, #32]
 8002bee:	b11b      	cbz	r3, 8002bf8 <__sinit+0x14>
 8002bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bf4:	f7ff bff0 	b.w	8002bd8 <__sfp_lock_release>
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <__sinit+0x28>)
 8002bfa:	6223      	str	r3, [r4, #32]
 8002bfc:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <__sinit+0x2c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f5      	bne.n	8002bf0 <__sinit+0xc>
 8002c04:	f7ff ffc4 	bl	8002b90 <global_stdio_init.part.0>
 8002c08:	e7f2      	b.n	8002bf0 <__sinit+0xc>
 8002c0a:	bf00      	nop
 8002c0c:	08002b51 	.word	0x08002b51
 8002c10:	2000024c 	.word	0x2000024c

08002c14 <_fwalk_sglue>:
 8002c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c18:	4607      	mov	r7, r0
 8002c1a:	4688      	mov	r8, r1
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	2600      	movs	r6, #0
 8002c20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c24:	f1b9 0901 	subs.w	r9, r9, #1
 8002c28:	d505      	bpl.n	8002c36 <_fwalk_sglue+0x22>
 8002c2a:	6824      	ldr	r4, [r4, #0]
 8002c2c:	2c00      	cmp	r4, #0
 8002c2e:	d1f7      	bne.n	8002c20 <_fwalk_sglue+0xc>
 8002c30:	4630      	mov	r0, r6
 8002c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c36:	89ab      	ldrh	r3, [r5, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d907      	bls.n	8002c4c <_fwalk_sglue+0x38>
 8002c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c40:	3301      	adds	r3, #1
 8002c42:	d003      	beq.n	8002c4c <_fwalk_sglue+0x38>
 8002c44:	4629      	mov	r1, r5
 8002c46:	4638      	mov	r0, r7
 8002c48:	47c0      	blx	r8
 8002c4a:	4306      	orrs	r6, r0
 8002c4c:	3568      	adds	r5, #104	@ 0x68
 8002c4e:	e7e9      	b.n	8002c24 <_fwalk_sglue+0x10>

08002c50 <iprintf>:
 8002c50:	b40f      	push	{r0, r1, r2, r3}
 8002c52:	b507      	push	{r0, r1, r2, lr}
 8002c54:	4906      	ldr	r1, [pc, #24]	@ (8002c70 <iprintf+0x20>)
 8002c56:	ab04      	add	r3, sp, #16
 8002c58:	6808      	ldr	r0, [r1, #0]
 8002c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c5e:	6881      	ldr	r1, [r0, #8]
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	f000 f9e9 	bl	8003038 <_vfiprintf_r>
 8002c66:	b003      	add	sp, #12
 8002c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c6c:	b004      	add	sp, #16
 8002c6e:	4770      	bx	lr
 8002c70:	20000018 	.word	0x20000018

08002c74 <__sread>:
 8002c74:	b510      	push	{r4, lr}
 8002c76:	460c      	mov	r4, r1
 8002c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c7c:	f000 f868 	bl	8002d50 <_read_r>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	bfab      	itete	ge
 8002c84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c86:	89a3      	ldrhlt	r3, [r4, #12]
 8002c88:	181b      	addge	r3, r3, r0
 8002c8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c8e:	bfac      	ite	ge
 8002c90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c92:	81a3      	strhlt	r3, [r4, #12]
 8002c94:	bd10      	pop	{r4, pc}

08002c96 <__swrite>:
 8002c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c9a:	461f      	mov	r7, r3
 8002c9c:	898b      	ldrh	r3, [r1, #12]
 8002c9e:	05db      	lsls	r3, r3, #23
 8002ca0:	4605      	mov	r5, r0
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	4616      	mov	r6, r2
 8002ca6:	d505      	bpl.n	8002cb4 <__swrite+0x1e>
 8002ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cac:	2302      	movs	r3, #2
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f000 f83c 	bl	8002d2c <_lseek_r>
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cbe:	81a3      	strh	r3, [r4, #12]
 8002cc0:	4632      	mov	r2, r6
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cca:	f000 b853 	b.w	8002d74 <_write_r>

08002cce <__sseek>:
 8002cce:	b510      	push	{r4, lr}
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd6:	f000 f829 	bl	8002d2c <_lseek_r>
 8002cda:	1c43      	adds	r3, r0, #1
 8002cdc:	89a3      	ldrh	r3, [r4, #12]
 8002cde:	bf15      	itete	ne
 8002ce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002cea:	81a3      	strheq	r3, [r4, #12]
 8002cec:	bf18      	it	ne
 8002cee:	81a3      	strhne	r3, [r4, #12]
 8002cf0:	bd10      	pop	{r4, pc}

08002cf2 <__sclose>:
 8002cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf6:	f000 b809 	b.w	8002d0c <_close_r>

08002cfa <memset>:
 8002cfa:	4402      	add	r2, r0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d100      	bne.n	8002d04 <memset+0xa>
 8002d02:	4770      	bx	lr
 8002d04:	f803 1b01 	strb.w	r1, [r3], #1
 8002d08:	e7f9      	b.n	8002cfe <memset+0x4>
	...

08002d0c <_close_r>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	4d06      	ldr	r5, [pc, #24]	@ (8002d28 <_close_r+0x1c>)
 8002d10:	2300      	movs	r3, #0
 8002d12:	4604      	mov	r4, r0
 8002d14:	4608      	mov	r0, r1
 8002d16:	602b      	str	r3, [r5, #0]
 8002d18:	f7fd fcb0 	bl	800067c <_close>
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	d102      	bne.n	8002d26 <_close_r+0x1a>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	b103      	cbz	r3, 8002d26 <_close_r+0x1a>
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
 8002d28:	20000250 	.word	0x20000250

08002d2c <_lseek_r>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4d07      	ldr	r5, [pc, #28]	@ (8002d4c <_lseek_r+0x20>)
 8002d30:	4604      	mov	r4, r0
 8002d32:	4608      	mov	r0, r1
 8002d34:	4611      	mov	r1, r2
 8002d36:	2200      	movs	r2, #0
 8002d38:	602a      	str	r2, [r5, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f7fd fcc5 	bl	80006ca <_lseek>
 8002d40:	1c43      	adds	r3, r0, #1
 8002d42:	d102      	bne.n	8002d4a <_lseek_r+0x1e>
 8002d44:	682b      	ldr	r3, [r5, #0]
 8002d46:	b103      	cbz	r3, 8002d4a <_lseek_r+0x1e>
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	bd38      	pop	{r3, r4, r5, pc}
 8002d4c:	20000250 	.word	0x20000250

08002d50 <_read_r>:
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	4d07      	ldr	r5, [pc, #28]	@ (8002d70 <_read_r+0x20>)
 8002d54:	4604      	mov	r4, r0
 8002d56:	4608      	mov	r0, r1
 8002d58:	4611      	mov	r1, r2
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	602a      	str	r2, [r5, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f7fd fc53 	bl	800060a <_read>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d102      	bne.n	8002d6e <_read_r+0x1e>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	b103      	cbz	r3, 8002d6e <_read_r+0x1e>
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
 8002d70:	20000250 	.word	0x20000250

08002d74 <_write_r>:
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	4d07      	ldr	r5, [pc, #28]	@ (8002d94 <_write_r+0x20>)
 8002d78:	4604      	mov	r4, r0
 8002d7a:	4608      	mov	r0, r1
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	2200      	movs	r2, #0
 8002d80:	602a      	str	r2, [r5, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f7fd fc5e 	bl	8000644 <_write>
 8002d88:	1c43      	adds	r3, r0, #1
 8002d8a:	d102      	bne.n	8002d92 <_write_r+0x1e>
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	b103      	cbz	r3, 8002d92 <_write_r+0x1e>
 8002d90:	6023      	str	r3, [r4, #0]
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
 8002d94:	20000250 	.word	0x20000250

08002d98 <__errno>:
 8002d98:	4b01      	ldr	r3, [pc, #4]	@ (8002da0 <__errno+0x8>)
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000018 	.word	0x20000018

08002da4 <__libc_init_array>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	4d0d      	ldr	r5, [pc, #52]	@ (8002ddc <__libc_init_array+0x38>)
 8002da8:	4c0d      	ldr	r4, [pc, #52]	@ (8002de0 <__libc_init_array+0x3c>)
 8002daa:	1b64      	subs	r4, r4, r5
 8002dac:	10a4      	asrs	r4, r4, #2
 8002dae:	2600      	movs	r6, #0
 8002db0:	42a6      	cmp	r6, r4
 8002db2:	d109      	bne.n	8002dc8 <__libc_init_array+0x24>
 8002db4:	4d0b      	ldr	r5, [pc, #44]	@ (8002de4 <__libc_init_array+0x40>)
 8002db6:	4c0c      	ldr	r4, [pc, #48]	@ (8002de8 <__libc_init_array+0x44>)
 8002db8:	f000 fdb8 	bl	800392c <_init>
 8002dbc:	1b64      	subs	r4, r4, r5
 8002dbe:	10a4      	asrs	r4, r4, #2
 8002dc0:	2600      	movs	r6, #0
 8002dc2:	42a6      	cmp	r6, r4
 8002dc4:	d105      	bne.n	8002dd2 <__libc_init_array+0x2e>
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}
 8002dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dcc:	4798      	blx	r3
 8002dce:	3601      	adds	r6, #1
 8002dd0:	e7ee      	b.n	8002db0 <__libc_init_array+0xc>
 8002dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd6:	4798      	blx	r3
 8002dd8:	3601      	adds	r6, #1
 8002dda:	e7f2      	b.n	8002dc2 <__libc_init_array+0x1e>
 8002ddc:	080039dc 	.word	0x080039dc
 8002de0:	080039dc 	.word	0x080039dc
 8002de4:	080039dc 	.word	0x080039dc
 8002de8:	080039e0 	.word	0x080039e0

08002dec <__retarget_lock_init_recursive>:
 8002dec:	4770      	bx	lr

08002dee <__retarget_lock_acquire_recursive>:
 8002dee:	4770      	bx	lr

08002df0 <__retarget_lock_release_recursive>:
 8002df0:	4770      	bx	lr
	...

08002df4 <_free_r>:
 8002df4:	b538      	push	{r3, r4, r5, lr}
 8002df6:	4605      	mov	r5, r0
 8002df8:	2900      	cmp	r1, #0
 8002dfa:	d041      	beq.n	8002e80 <_free_r+0x8c>
 8002dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e00:	1f0c      	subs	r4, r1, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bfb8      	it	lt
 8002e06:	18e4      	addlt	r4, r4, r3
 8002e08:	f000 f8e0 	bl	8002fcc <__malloc_lock>
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e84 <_free_r+0x90>)
 8002e0e:	6813      	ldr	r3, [r2, #0]
 8002e10:	b933      	cbnz	r3, 8002e20 <_free_r+0x2c>
 8002e12:	6063      	str	r3, [r4, #4]
 8002e14:	6014      	str	r4, [r2, #0]
 8002e16:	4628      	mov	r0, r5
 8002e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e1c:	f000 b8dc 	b.w	8002fd8 <__malloc_unlock>
 8002e20:	42a3      	cmp	r3, r4
 8002e22:	d908      	bls.n	8002e36 <_free_r+0x42>
 8002e24:	6820      	ldr	r0, [r4, #0]
 8002e26:	1821      	adds	r1, r4, r0
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	bf01      	itttt	eq
 8002e2c:	6819      	ldreq	r1, [r3, #0]
 8002e2e:	685b      	ldreq	r3, [r3, #4]
 8002e30:	1809      	addeq	r1, r1, r0
 8002e32:	6021      	streq	r1, [r4, #0]
 8002e34:	e7ed      	b.n	8002e12 <_free_r+0x1e>
 8002e36:	461a      	mov	r2, r3
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	b10b      	cbz	r3, 8002e40 <_free_r+0x4c>
 8002e3c:	42a3      	cmp	r3, r4
 8002e3e:	d9fa      	bls.n	8002e36 <_free_r+0x42>
 8002e40:	6811      	ldr	r1, [r2, #0]
 8002e42:	1850      	adds	r0, r2, r1
 8002e44:	42a0      	cmp	r0, r4
 8002e46:	d10b      	bne.n	8002e60 <_free_r+0x6c>
 8002e48:	6820      	ldr	r0, [r4, #0]
 8002e4a:	4401      	add	r1, r0
 8002e4c:	1850      	adds	r0, r2, r1
 8002e4e:	4283      	cmp	r3, r0
 8002e50:	6011      	str	r1, [r2, #0]
 8002e52:	d1e0      	bne.n	8002e16 <_free_r+0x22>
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	6053      	str	r3, [r2, #4]
 8002e5a:	4408      	add	r0, r1
 8002e5c:	6010      	str	r0, [r2, #0]
 8002e5e:	e7da      	b.n	8002e16 <_free_r+0x22>
 8002e60:	d902      	bls.n	8002e68 <_free_r+0x74>
 8002e62:	230c      	movs	r3, #12
 8002e64:	602b      	str	r3, [r5, #0]
 8002e66:	e7d6      	b.n	8002e16 <_free_r+0x22>
 8002e68:	6820      	ldr	r0, [r4, #0]
 8002e6a:	1821      	adds	r1, r4, r0
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	bf04      	itt	eq
 8002e70:	6819      	ldreq	r1, [r3, #0]
 8002e72:	685b      	ldreq	r3, [r3, #4]
 8002e74:	6063      	str	r3, [r4, #4]
 8002e76:	bf04      	itt	eq
 8002e78:	1809      	addeq	r1, r1, r0
 8002e7a:	6021      	streq	r1, [r4, #0]
 8002e7c:	6054      	str	r4, [r2, #4]
 8002e7e:	e7ca      	b.n	8002e16 <_free_r+0x22>
 8002e80:	bd38      	pop	{r3, r4, r5, pc}
 8002e82:	bf00      	nop
 8002e84:	2000025c 	.word	0x2000025c

08002e88 <sbrk_aligned>:
 8002e88:	b570      	push	{r4, r5, r6, lr}
 8002e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8002ec8 <sbrk_aligned+0x40>)
 8002e8c:	460c      	mov	r4, r1
 8002e8e:	6831      	ldr	r1, [r6, #0]
 8002e90:	4605      	mov	r5, r0
 8002e92:	b911      	cbnz	r1, 8002e9a <sbrk_aligned+0x12>
 8002e94:	f000 fcb6 	bl	8003804 <_sbrk_r>
 8002e98:	6030      	str	r0, [r6, #0]
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f000 fcb1 	bl	8003804 <_sbrk_r>
 8002ea2:	1c43      	adds	r3, r0, #1
 8002ea4:	d103      	bne.n	8002eae <sbrk_aligned+0x26>
 8002ea6:	f04f 34ff 	mov.w	r4, #4294967295
 8002eaa:	4620      	mov	r0, r4
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
 8002eae:	1cc4      	adds	r4, r0, #3
 8002eb0:	f024 0403 	bic.w	r4, r4, #3
 8002eb4:	42a0      	cmp	r0, r4
 8002eb6:	d0f8      	beq.n	8002eaa <sbrk_aligned+0x22>
 8002eb8:	1a21      	subs	r1, r4, r0
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f000 fca2 	bl	8003804 <_sbrk_r>
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d1f2      	bne.n	8002eaa <sbrk_aligned+0x22>
 8002ec4:	e7ef      	b.n	8002ea6 <sbrk_aligned+0x1e>
 8002ec6:	bf00      	nop
 8002ec8:	20000258 	.word	0x20000258

08002ecc <_malloc_r>:
 8002ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ed0:	1ccd      	adds	r5, r1, #3
 8002ed2:	f025 0503 	bic.w	r5, r5, #3
 8002ed6:	3508      	adds	r5, #8
 8002ed8:	2d0c      	cmp	r5, #12
 8002eda:	bf38      	it	cc
 8002edc:	250c      	movcc	r5, #12
 8002ede:	2d00      	cmp	r5, #0
 8002ee0:	4606      	mov	r6, r0
 8002ee2:	db01      	blt.n	8002ee8 <_malloc_r+0x1c>
 8002ee4:	42a9      	cmp	r1, r5
 8002ee6:	d904      	bls.n	8002ef2 <_malloc_r+0x26>
 8002ee8:	230c      	movs	r3, #12
 8002eea:	6033      	str	r3, [r6, #0]
 8002eec:	2000      	movs	r0, #0
 8002eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fc8 <_malloc_r+0xfc>
 8002ef6:	f000 f869 	bl	8002fcc <__malloc_lock>
 8002efa:	f8d8 3000 	ldr.w	r3, [r8]
 8002efe:	461c      	mov	r4, r3
 8002f00:	bb44      	cbnz	r4, 8002f54 <_malloc_r+0x88>
 8002f02:	4629      	mov	r1, r5
 8002f04:	4630      	mov	r0, r6
 8002f06:	f7ff ffbf 	bl	8002e88 <sbrk_aligned>
 8002f0a:	1c43      	adds	r3, r0, #1
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	d158      	bne.n	8002fc2 <_malloc_r+0xf6>
 8002f10:	f8d8 4000 	ldr.w	r4, [r8]
 8002f14:	4627      	mov	r7, r4
 8002f16:	2f00      	cmp	r7, #0
 8002f18:	d143      	bne.n	8002fa2 <_malloc_r+0xd6>
 8002f1a:	2c00      	cmp	r4, #0
 8002f1c:	d04b      	beq.n	8002fb6 <_malloc_r+0xea>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	4639      	mov	r1, r7
 8002f22:	4630      	mov	r0, r6
 8002f24:	eb04 0903 	add.w	r9, r4, r3
 8002f28:	f000 fc6c 	bl	8003804 <_sbrk_r>
 8002f2c:	4581      	cmp	r9, r0
 8002f2e:	d142      	bne.n	8002fb6 <_malloc_r+0xea>
 8002f30:	6821      	ldr	r1, [r4, #0]
 8002f32:	1a6d      	subs	r5, r5, r1
 8002f34:	4629      	mov	r1, r5
 8002f36:	4630      	mov	r0, r6
 8002f38:	f7ff ffa6 	bl	8002e88 <sbrk_aligned>
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	d03a      	beq.n	8002fb6 <_malloc_r+0xea>
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	442b      	add	r3, r5
 8002f44:	6023      	str	r3, [r4, #0]
 8002f46:	f8d8 3000 	ldr.w	r3, [r8]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	bb62      	cbnz	r2, 8002fa8 <_malloc_r+0xdc>
 8002f4e:	f8c8 7000 	str.w	r7, [r8]
 8002f52:	e00f      	b.n	8002f74 <_malloc_r+0xa8>
 8002f54:	6822      	ldr	r2, [r4, #0]
 8002f56:	1b52      	subs	r2, r2, r5
 8002f58:	d420      	bmi.n	8002f9c <_malloc_r+0xd0>
 8002f5a:	2a0b      	cmp	r2, #11
 8002f5c:	d917      	bls.n	8002f8e <_malloc_r+0xc2>
 8002f5e:	1961      	adds	r1, r4, r5
 8002f60:	42a3      	cmp	r3, r4
 8002f62:	6025      	str	r5, [r4, #0]
 8002f64:	bf18      	it	ne
 8002f66:	6059      	strne	r1, [r3, #4]
 8002f68:	6863      	ldr	r3, [r4, #4]
 8002f6a:	bf08      	it	eq
 8002f6c:	f8c8 1000 	streq.w	r1, [r8]
 8002f70:	5162      	str	r2, [r4, r5]
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	4630      	mov	r0, r6
 8002f76:	f000 f82f 	bl	8002fd8 <__malloc_unlock>
 8002f7a:	f104 000b 	add.w	r0, r4, #11
 8002f7e:	1d23      	adds	r3, r4, #4
 8002f80:	f020 0007 	bic.w	r0, r0, #7
 8002f84:	1ac2      	subs	r2, r0, r3
 8002f86:	bf1c      	itt	ne
 8002f88:	1a1b      	subne	r3, r3, r0
 8002f8a:	50a3      	strne	r3, [r4, r2]
 8002f8c:	e7af      	b.n	8002eee <_malloc_r+0x22>
 8002f8e:	6862      	ldr	r2, [r4, #4]
 8002f90:	42a3      	cmp	r3, r4
 8002f92:	bf0c      	ite	eq
 8002f94:	f8c8 2000 	streq.w	r2, [r8]
 8002f98:	605a      	strne	r2, [r3, #4]
 8002f9a:	e7eb      	b.n	8002f74 <_malloc_r+0xa8>
 8002f9c:	4623      	mov	r3, r4
 8002f9e:	6864      	ldr	r4, [r4, #4]
 8002fa0:	e7ae      	b.n	8002f00 <_malloc_r+0x34>
 8002fa2:	463c      	mov	r4, r7
 8002fa4:	687f      	ldr	r7, [r7, #4]
 8002fa6:	e7b6      	b.n	8002f16 <_malloc_r+0x4a>
 8002fa8:	461a      	mov	r2, r3
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	d1fb      	bne.n	8002fa8 <_malloc_r+0xdc>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6053      	str	r3, [r2, #4]
 8002fb4:	e7de      	b.n	8002f74 <_malloc_r+0xa8>
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	6033      	str	r3, [r6, #0]
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f000 f80c 	bl	8002fd8 <__malloc_unlock>
 8002fc0:	e794      	b.n	8002eec <_malloc_r+0x20>
 8002fc2:	6005      	str	r5, [r0, #0]
 8002fc4:	e7d6      	b.n	8002f74 <_malloc_r+0xa8>
 8002fc6:	bf00      	nop
 8002fc8:	2000025c 	.word	0x2000025c

08002fcc <__malloc_lock>:
 8002fcc:	4801      	ldr	r0, [pc, #4]	@ (8002fd4 <__malloc_lock+0x8>)
 8002fce:	f7ff bf0e 	b.w	8002dee <__retarget_lock_acquire_recursive>
 8002fd2:	bf00      	nop
 8002fd4:	20000254 	.word	0x20000254

08002fd8 <__malloc_unlock>:
 8002fd8:	4801      	ldr	r0, [pc, #4]	@ (8002fe0 <__malloc_unlock+0x8>)
 8002fda:	f7ff bf09 	b.w	8002df0 <__retarget_lock_release_recursive>
 8002fde:	bf00      	nop
 8002fe0:	20000254 	.word	0x20000254

08002fe4 <__sfputc_r>:
 8002fe4:	6893      	ldr	r3, [r2, #8]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	b410      	push	{r4}
 8002fec:	6093      	str	r3, [r2, #8]
 8002fee:	da08      	bge.n	8003002 <__sfputc_r+0x1e>
 8002ff0:	6994      	ldr	r4, [r2, #24]
 8002ff2:	42a3      	cmp	r3, r4
 8002ff4:	db01      	blt.n	8002ffa <__sfputc_r+0x16>
 8002ff6:	290a      	cmp	r1, #10
 8002ff8:	d103      	bne.n	8003002 <__sfputc_r+0x1e>
 8002ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ffe:	f000 bb6d 	b.w	80036dc <__swbuf_r>
 8003002:	6813      	ldr	r3, [r2, #0]
 8003004:	1c58      	adds	r0, r3, #1
 8003006:	6010      	str	r0, [r2, #0]
 8003008:	7019      	strb	r1, [r3, #0]
 800300a:	4608      	mov	r0, r1
 800300c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003010:	4770      	bx	lr

08003012 <__sfputs_r>:
 8003012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003014:	4606      	mov	r6, r0
 8003016:	460f      	mov	r7, r1
 8003018:	4614      	mov	r4, r2
 800301a:	18d5      	adds	r5, r2, r3
 800301c:	42ac      	cmp	r4, r5
 800301e:	d101      	bne.n	8003024 <__sfputs_r+0x12>
 8003020:	2000      	movs	r0, #0
 8003022:	e007      	b.n	8003034 <__sfputs_r+0x22>
 8003024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003028:	463a      	mov	r2, r7
 800302a:	4630      	mov	r0, r6
 800302c:	f7ff ffda 	bl	8002fe4 <__sfputc_r>
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	d1f3      	bne.n	800301c <__sfputs_r+0xa>
 8003034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003038 <_vfiprintf_r>:
 8003038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303c:	460d      	mov	r5, r1
 800303e:	b09d      	sub	sp, #116	@ 0x74
 8003040:	4614      	mov	r4, r2
 8003042:	4698      	mov	r8, r3
 8003044:	4606      	mov	r6, r0
 8003046:	b118      	cbz	r0, 8003050 <_vfiprintf_r+0x18>
 8003048:	6a03      	ldr	r3, [r0, #32]
 800304a:	b90b      	cbnz	r3, 8003050 <_vfiprintf_r+0x18>
 800304c:	f7ff fdca 	bl	8002be4 <__sinit>
 8003050:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003052:	07d9      	lsls	r1, r3, #31
 8003054:	d405      	bmi.n	8003062 <_vfiprintf_r+0x2a>
 8003056:	89ab      	ldrh	r3, [r5, #12]
 8003058:	059a      	lsls	r2, r3, #22
 800305a:	d402      	bmi.n	8003062 <_vfiprintf_r+0x2a>
 800305c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800305e:	f7ff fec6 	bl	8002dee <__retarget_lock_acquire_recursive>
 8003062:	89ab      	ldrh	r3, [r5, #12]
 8003064:	071b      	lsls	r3, r3, #28
 8003066:	d501      	bpl.n	800306c <_vfiprintf_r+0x34>
 8003068:	692b      	ldr	r3, [r5, #16]
 800306a:	b99b      	cbnz	r3, 8003094 <_vfiprintf_r+0x5c>
 800306c:	4629      	mov	r1, r5
 800306e:	4630      	mov	r0, r6
 8003070:	f000 fb72 	bl	8003758 <__swsetup_r>
 8003074:	b170      	cbz	r0, 8003094 <_vfiprintf_r+0x5c>
 8003076:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003078:	07dc      	lsls	r4, r3, #31
 800307a:	d504      	bpl.n	8003086 <_vfiprintf_r+0x4e>
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	b01d      	add	sp, #116	@ 0x74
 8003082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003086:	89ab      	ldrh	r3, [r5, #12]
 8003088:	0598      	lsls	r0, r3, #22
 800308a:	d4f7      	bmi.n	800307c <_vfiprintf_r+0x44>
 800308c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800308e:	f7ff feaf 	bl	8002df0 <__retarget_lock_release_recursive>
 8003092:	e7f3      	b.n	800307c <_vfiprintf_r+0x44>
 8003094:	2300      	movs	r3, #0
 8003096:	9309      	str	r3, [sp, #36]	@ 0x24
 8003098:	2320      	movs	r3, #32
 800309a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800309e:	f8cd 800c 	str.w	r8, [sp, #12]
 80030a2:	2330      	movs	r3, #48	@ 0x30
 80030a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003254 <_vfiprintf_r+0x21c>
 80030a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80030ac:	f04f 0901 	mov.w	r9, #1
 80030b0:	4623      	mov	r3, r4
 80030b2:	469a      	mov	sl, r3
 80030b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030b8:	b10a      	cbz	r2, 80030be <_vfiprintf_r+0x86>
 80030ba:	2a25      	cmp	r2, #37	@ 0x25
 80030bc:	d1f9      	bne.n	80030b2 <_vfiprintf_r+0x7a>
 80030be:	ebba 0b04 	subs.w	fp, sl, r4
 80030c2:	d00b      	beq.n	80030dc <_vfiprintf_r+0xa4>
 80030c4:	465b      	mov	r3, fp
 80030c6:	4622      	mov	r2, r4
 80030c8:	4629      	mov	r1, r5
 80030ca:	4630      	mov	r0, r6
 80030cc:	f7ff ffa1 	bl	8003012 <__sfputs_r>
 80030d0:	3001      	adds	r0, #1
 80030d2:	f000 80a7 	beq.w	8003224 <_vfiprintf_r+0x1ec>
 80030d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80030d8:	445a      	add	r2, fp
 80030da:	9209      	str	r2, [sp, #36]	@ 0x24
 80030dc:	f89a 3000 	ldrb.w	r3, [sl]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 809f 	beq.w	8003224 <_vfiprintf_r+0x1ec>
 80030e6:	2300      	movs	r3, #0
 80030e8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030f0:	f10a 0a01 	add.w	sl, sl, #1
 80030f4:	9304      	str	r3, [sp, #16]
 80030f6:	9307      	str	r3, [sp, #28]
 80030f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80030fe:	4654      	mov	r4, sl
 8003100:	2205      	movs	r2, #5
 8003102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003106:	4853      	ldr	r0, [pc, #332]	@ (8003254 <_vfiprintf_r+0x21c>)
 8003108:	f7fd f862 	bl	80001d0 <memchr>
 800310c:	9a04      	ldr	r2, [sp, #16]
 800310e:	b9d8      	cbnz	r0, 8003148 <_vfiprintf_r+0x110>
 8003110:	06d1      	lsls	r1, r2, #27
 8003112:	bf44      	itt	mi
 8003114:	2320      	movmi	r3, #32
 8003116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800311a:	0713      	lsls	r3, r2, #28
 800311c:	bf44      	itt	mi
 800311e:	232b      	movmi	r3, #43	@ 0x2b
 8003120:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003124:	f89a 3000 	ldrb.w	r3, [sl]
 8003128:	2b2a      	cmp	r3, #42	@ 0x2a
 800312a:	d015      	beq.n	8003158 <_vfiprintf_r+0x120>
 800312c:	9a07      	ldr	r2, [sp, #28]
 800312e:	4654      	mov	r4, sl
 8003130:	2000      	movs	r0, #0
 8003132:	f04f 0c0a 	mov.w	ip, #10
 8003136:	4621      	mov	r1, r4
 8003138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800313c:	3b30      	subs	r3, #48	@ 0x30
 800313e:	2b09      	cmp	r3, #9
 8003140:	d94b      	bls.n	80031da <_vfiprintf_r+0x1a2>
 8003142:	b1b0      	cbz	r0, 8003172 <_vfiprintf_r+0x13a>
 8003144:	9207      	str	r2, [sp, #28]
 8003146:	e014      	b.n	8003172 <_vfiprintf_r+0x13a>
 8003148:	eba0 0308 	sub.w	r3, r0, r8
 800314c:	fa09 f303 	lsl.w	r3, r9, r3
 8003150:	4313      	orrs	r3, r2
 8003152:	9304      	str	r3, [sp, #16]
 8003154:	46a2      	mov	sl, r4
 8003156:	e7d2      	b.n	80030fe <_vfiprintf_r+0xc6>
 8003158:	9b03      	ldr	r3, [sp, #12]
 800315a:	1d19      	adds	r1, r3, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	9103      	str	r1, [sp, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	bfbb      	ittet	lt
 8003164:	425b      	neglt	r3, r3
 8003166:	f042 0202 	orrlt.w	r2, r2, #2
 800316a:	9307      	strge	r3, [sp, #28]
 800316c:	9307      	strlt	r3, [sp, #28]
 800316e:	bfb8      	it	lt
 8003170:	9204      	strlt	r2, [sp, #16]
 8003172:	7823      	ldrb	r3, [r4, #0]
 8003174:	2b2e      	cmp	r3, #46	@ 0x2e
 8003176:	d10a      	bne.n	800318e <_vfiprintf_r+0x156>
 8003178:	7863      	ldrb	r3, [r4, #1]
 800317a:	2b2a      	cmp	r3, #42	@ 0x2a
 800317c:	d132      	bne.n	80031e4 <_vfiprintf_r+0x1ac>
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	1d1a      	adds	r2, r3, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	9203      	str	r2, [sp, #12]
 8003186:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800318a:	3402      	adds	r4, #2
 800318c:	9305      	str	r3, [sp, #20]
 800318e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003264 <_vfiprintf_r+0x22c>
 8003192:	7821      	ldrb	r1, [r4, #0]
 8003194:	2203      	movs	r2, #3
 8003196:	4650      	mov	r0, sl
 8003198:	f7fd f81a 	bl	80001d0 <memchr>
 800319c:	b138      	cbz	r0, 80031ae <_vfiprintf_r+0x176>
 800319e:	9b04      	ldr	r3, [sp, #16]
 80031a0:	eba0 000a 	sub.w	r0, r0, sl
 80031a4:	2240      	movs	r2, #64	@ 0x40
 80031a6:	4082      	lsls	r2, r0
 80031a8:	4313      	orrs	r3, r2
 80031aa:	3401      	adds	r4, #1
 80031ac:	9304      	str	r3, [sp, #16]
 80031ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b2:	4829      	ldr	r0, [pc, #164]	@ (8003258 <_vfiprintf_r+0x220>)
 80031b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80031b8:	2206      	movs	r2, #6
 80031ba:	f7fd f809 	bl	80001d0 <memchr>
 80031be:	2800      	cmp	r0, #0
 80031c0:	d03f      	beq.n	8003242 <_vfiprintf_r+0x20a>
 80031c2:	4b26      	ldr	r3, [pc, #152]	@ (800325c <_vfiprintf_r+0x224>)
 80031c4:	bb1b      	cbnz	r3, 800320e <_vfiprintf_r+0x1d6>
 80031c6:	9b03      	ldr	r3, [sp, #12]
 80031c8:	3307      	adds	r3, #7
 80031ca:	f023 0307 	bic.w	r3, r3, #7
 80031ce:	3308      	adds	r3, #8
 80031d0:	9303      	str	r3, [sp, #12]
 80031d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031d4:	443b      	add	r3, r7
 80031d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80031d8:	e76a      	b.n	80030b0 <_vfiprintf_r+0x78>
 80031da:	fb0c 3202 	mla	r2, ip, r2, r3
 80031de:	460c      	mov	r4, r1
 80031e0:	2001      	movs	r0, #1
 80031e2:	e7a8      	b.n	8003136 <_vfiprintf_r+0xfe>
 80031e4:	2300      	movs	r3, #0
 80031e6:	3401      	adds	r4, #1
 80031e8:	9305      	str	r3, [sp, #20]
 80031ea:	4619      	mov	r1, r3
 80031ec:	f04f 0c0a 	mov.w	ip, #10
 80031f0:	4620      	mov	r0, r4
 80031f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031f6:	3a30      	subs	r2, #48	@ 0x30
 80031f8:	2a09      	cmp	r2, #9
 80031fa:	d903      	bls.n	8003204 <_vfiprintf_r+0x1cc>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0c6      	beq.n	800318e <_vfiprintf_r+0x156>
 8003200:	9105      	str	r1, [sp, #20]
 8003202:	e7c4      	b.n	800318e <_vfiprintf_r+0x156>
 8003204:	fb0c 2101 	mla	r1, ip, r1, r2
 8003208:	4604      	mov	r4, r0
 800320a:	2301      	movs	r3, #1
 800320c:	e7f0      	b.n	80031f0 <_vfiprintf_r+0x1b8>
 800320e:	ab03      	add	r3, sp, #12
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	462a      	mov	r2, r5
 8003214:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <_vfiprintf_r+0x228>)
 8003216:	a904      	add	r1, sp, #16
 8003218:	4630      	mov	r0, r6
 800321a:	f3af 8000 	nop.w
 800321e:	4607      	mov	r7, r0
 8003220:	1c78      	adds	r0, r7, #1
 8003222:	d1d6      	bne.n	80031d2 <_vfiprintf_r+0x19a>
 8003224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003226:	07d9      	lsls	r1, r3, #31
 8003228:	d405      	bmi.n	8003236 <_vfiprintf_r+0x1fe>
 800322a:	89ab      	ldrh	r3, [r5, #12]
 800322c:	059a      	lsls	r2, r3, #22
 800322e:	d402      	bmi.n	8003236 <_vfiprintf_r+0x1fe>
 8003230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003232:	f7ff fddd 	bl	8002df0 <__retarget_lock_release_recursive>
 8003236:	89ab      	ldrh	r3, [r5, #12]
 8003238:	065b      	lsls	r3, r3, #25
 800323a:	f53f af1f 	bmi.w	800307c <_vfiprintf_r+0x44>
 800323e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003240:	e71e      	b.n	8003080 <_vfiprintf_r+0x48>
 8003242:	ab03      	add	r3, sp, #12
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	462a      	mov	r2, r5
 8003248:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <_vfiprintf_r+0x228>)
 800324a:	a904      	add	r1, sp, #16
 800324c:	4630      	mov	r0, r6
 800324e:	f000 f879 	bl	8003344 <_printf_i>
 8003252:	e7e4      	b.n	800321e <_vfiprintf_r+0x1e6>
 8003254:	080039a0 	.word	0x080039a0
 8003258:	080039aa 	.word	0x080039aa
 800325c:	00000000 	.word	0x00000000
 8003260:	08003013 	.word	0x08003013
 8003264:	080039a6 	.word	0x080039a6

08003268 <_printf_common>:
 8003268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800326c:	4616      	mov	r6, r2
 800326e:	4698      	mov	r8, r3
 8003270:	688a      	ldr	r2, [r1, #8]
 8003272:	690b      	ldr	r3, [r1, #16]
 8003274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003278:	4293      	cmp	r3, r2
 800327a:	bfb8      	it	lt
 800327c:	4613      	movlt	r3, r2
 800327e:	6033      	str	r3, [r6, #0]
 8003280:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003284:	4607      	mov	r7, r0
 8003286:	460c      	mov	r4, r1
 8003288:	b10a      	cbz	r2, 800328e <_printf_common+0x26>
 800328a:	3301      	adds	r3, #1
 800328c:	6033      	str	r3, [r6, #0]
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	0699      	lsls	r1, r3, #26
 8003292:	bf42      	ittt	mi
 8003294:	6833      	ldrmi	r3, [r6, #0]
 8003296:	3302      	addmi	r3, #2
 8003298:	6033      	strmi	r3, [r6, #0]
 800329a:	6825      	ldr	r5, [r4, #0]
 800329c:	f015 0506 	ands.w	r5, r5, #6
 80032a0:	d106      	bne.n	80032b0 <_printf_common+0x48>
 80032a2:	f104 0a19 	add.w	sl, r4, #25
 80032a6:	68e3      	ldr	r3, [r4, #12]
 80032a8:	6832      	ldr	r2, [r6, #0]
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	42ab      	cmp	r3, r5
 80032ae:	dc26      	bgt.n	80032fe <_printf_common+0x96>
 80032b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	3b00      	subs	r3, #0
 80032b8:	bf18      	it	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	0692      	lsls	r2, r2, #26
 80032be:	d42b      	bmi.n	8003318 <_printf_common+0xb0>
 80032c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032c4:	4641      	mov	r1, r8
 80032c6:	4638      	mov	r0, r7
 80032c8:	47c8      	blx	r9
 80032ca:	3001      	adds	r0, #1
 80032cc:	d01e      	beq.n	800330c <_printf_common+0xa4>
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	6922      	ldr	r2, [r4, #16]
 80032d2:	f003 0306 	and.w	r3, r3, #6
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	bf02      	ittt	eq
 80032da:	68e5      	ldreq	r5, [r4, #12]
 80032dc:	6833      	ldreq	r3, [r6, #0]
 80032de:	1aed      	subeq	r5, r5, r3
 80032e0:	68a3      	ldr	r3, [r4, #8]
 80032e2:	bf0c      	ite	eq
 80032e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e8:	2500      	movne	r5, #0
 80032ea:	4293      	cmp	r3, r2
 80032ec:	bfc4      	itt	gt
 80032ee:	1a9b      	subgt	r3, r3, r2
 80032f0:	18ed      	addgt	r5, r5, r3
 80032f2:	2600      	movs	r6, #0
 80032f4:	341a      	adds	r4, #26
 80032f6:	42b5      	cmp	r5, r6
 80032f8:	d11a      	bne.n	8003330 <_printf_common+0xc8>
 80032fa:	2000      	movs	r0, #0
 80032fc:	e008      	b.n	8003310 <_printf_common+0xa8>
 80032fe:	2301      	movs	r3, #1
 8003300:	4652      	mov	r2, sl
 8003302:	4641      	mov	r1, r8
 8003304:	4638      	mov	r0, r7
 8003306:	47c8      	blx	r9
 8003308:	3001      	adds	r0, #1
 800330a:	d103      	bne.n	8003314 <_printf_common+0xac>
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003314:	3501      	adds	r5, #1
 8003316:	e7c6      	b.n	80032a6 <_printf_common+0x3e>
 8003318:	18e1      	adds	r1, r4, r3
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	2030      	movs	r0, #48	@ 0x30
 800331e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003322:	4422      	add	r2, r4
 8003324:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003328:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800332c:	3302      	adds	r3, #2
 800332e:	e7c7      	b.n	80032c0 <_printf_common+0x58>
 8003330:	2301      	movs	r3, #1
 8003332:	4622      	mov	r2, r4
 8003334:	4641      	mov	r1, r8
 8003336:	4638      	mov	r0, r7
 8003338:	47c8      	blx	r9
 800333a:	3001      	adds	r0, #1
 800333c:	d0e6      	beq.n	800330c <_printf_common+0xa4>
 800333e:	3601      	adds	r6, #1
 8003340:	e7d9      	b.n	80032f6 <_printf_common+0x8e>
	...

08003344 <_printf_i>:
 8003344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003348:	7e0f      	ldrb	r7, [r1, #24]
 800334a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800334c:	2f78      	cmp	r7, #120	@ 0x78
 800334e:	4691      	mov	r9, r2
 8003350:	4680      	mov	r8, r0
 8003352:	460c      	mov	r4, r1
 8003354:	469a      	mov	sl, r3
 8003356:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800335a:	d807      	bhi.n	800336c <_printf_i+0x28>
 800335c:	2f62      	cmp	r7, #98	@ 0x62
 800335e:	d80a      	bhi.n	8003376 <_printf_i+0x32>
 8003360:	2f00      	cmp	r7, #0
 8003362:	f000 80d2 	beq.w	800350a <_printf_i+0x1c6>
 8003366:	2f58      	cmp	r7, #88	@ 0x58
 8003368:	f000 80b9 	beq.w	80034de <_printf_i+0x19a>
 800336c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003370:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003374:	e03a      	b.n	80033ec <_printf_i+0xa8>
 8003376:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800337a:	2b15      	cmp	r3, #21
 800337c:	d8f6      	bhi.n	800336c <_printf_i+0x28>
 800337e:	a101      	add	r1, pc, #4	@ (adr r1, 8003384 <_printf_i+0x40>)
 8003380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003384:	080033dd 	.word	0x080033dd
 8003388:	080033f1 	.word	0x080033f1
 800338c:	0800336d 	.word	0x0800336d
 8003390:	0800336d 	.word	0x0800336d
 8003394:	0800336d 	.word	0x0800336d
 8003398:	0800336d 	.word	0x0800336d
 800339c:	080033f1 	.word	0x080033f1
 80033a0:	0800336d 	.word	0x0800336d
 80033a4:	0800336d 	.word	0x0800336d
 80033a8:	0800336d 	.word	0x0800336d
 80033ac:	0800336d 	.word	0x0800336d
 80033b0:	080034f1 	.word	0x080034f1
 80033b4:	0800341b 	.word	0x0800341b
 80033b8:	080034ab 	.word	0x080034ab
 80033bc:	0800336d 	.word	0x0800336d
 80033c0:	0800336d 	.word	0x0800336d
 80033c4:	08003513 	.word	0x08003513
 80033c8:	0800336d 	.word	0x0800336d
 80033cc:	0800341b 	.word	0x0800341b
 80033d0:	0800336d 	.word	0x0800336d
 80033d4:	0800336d 	.word	0x0800336d
 80033d8:	080034b3 	.word	0x080034b3
 80033dc:	6833      	ldr	r3, [r6, #0]
 80033de:	1d1a      	adds	r2, r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6032      	str	r2, [r6, #0]
 80033e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033ec:	2301      	movs	r3, #1
 80033ee:	e09d      	b.n	800352c <_printf_i+0x1e8>
 80033f0:	6833      	ldr	r3, [r6, #0]
 80033f2:	6820      	ldr	r0, [r4, #0]
 80033f4:	1d19      	adds	r1, r3, #4
 80033f6:	6031      	str	r1, [r6, #0]
 80033f8:	0606      	lsls	r6, r0, #24
 80033fa:	d501      	bpl.n	8003400 <_printf_i+0xbc>
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	e003      	b.n	8003408 <_printf_i+0xc4>
 8003400:	0645      	lsls	r5, r0, #25
 8003402:	d5fb      	bpl.n	80033fc <_printf_i+0xb8>
 8003404:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003408:	2d00      	cmp	r5, #0
 800340a:	da03      	bge.n	8003414 <_printf_i+0xd0>
 800340c:	232d      	movs	r3, #45	@ 0x2d
 800340e:	426d      	negs	r5, r5
 8003410:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003414:	4859      	ldr	r0, [pc, #356]	@ (800357c <_printf_i+0x238>)
 8003416:	230a      	movs	r3, #10
 8003418:	e011      	b.n	800343e <_printf_i+0xfa>
 800341a:	6821      	ldr	r1, [r4, #0]
 800341c:	6833      	ldr	r3, [r6, #0]
 800341e:	0608      	lsls	r0, r1, #24
 8003420:	f853 5b04 	ldr.w	r5, [r3], #4
 8003424:	d402      	bmi.n	800342c <_printf_i+0xe8>
 8003426:	0649      	lsls	r1, r1, #25
 8003428:	bf48      	it	mi
 800342a:	b2ad      	uxthmi	r5, r5
 800342c:	2f6f      	cmp	r7, #111	@ 0x6f
 800342e:	4853      	ldr	r0, [pc, #332]	@ (800357c <_printf_i+0x238>)
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	bf14      	ite	ne
 8003434:	230a      	movne	r3, #10
 8003436:	2308      	moveq	r3, #8
 8003438:	2100      	movs	r1, #0
 800343a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800343e:	6866      	ldr	r6, [r4, #4]
 8003440:	60a6      	str	r6, [r4, #8]
 8003442:	2e00      	cmp	r6, #0
 8003444:	bfa2      	ittt	ge
 8003446:	6821      	ldrge	r1, [r4, #0]
 8003448:	f021 0104 	bicge.w	r1, r1, #4
 800344c:	6021      	strge	r1, [r4, #0]
 800344e:	b90d      	cbnz	r5, 8003454 <_printf_i+0x110>
 8003450:	2e00      	cmp	r6, #0
 8003452:	d04b      	beq.n	80034ec <_printf_i+0x1a8>
 8003454:	4616      	mov	r6, r2
 8003456:	fbb5 f1f3 	udiv	r1, r5, r3
 800345a:	fb03 5711 	mls	r7, r3, r1, r5
 800345e:	5dc7      	ldrb	r7, [r0, r7]
 8003460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003464:	462f      	mov	r7, r5
 8003466:	42bb      	cmp	r3, r7
 8003468:	460d      	mov	r5, r1
 800346a:	d9f4      	bls.n	8003456 <_printf_i+0x112>
 800346c:	2b08      	cmp	r3, #8
 800346e:	d10b      	bne.n	8003488 <_printf_i+0x144>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	07df      	lsls	r7, r3, #31
 8003474:	d508      	bpl.n	8003488 <_printf_i+0x144>
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	6861      	ldr	r1, [r4, #4]
 800347a:	4299      	cmp	r1, r3
 800347c:	bfde      	ittt	le
 800347e:	2330      	movle	r3, #48	@ 0x30
 8003480:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003484:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003488:	1b92      	subs	r2, r2, r6
 800348a:	6122      	str	r2, [r4, #16]
 800348c:	f8cd a000 	str.w	sl, [sp]
 8003490:	464b      	mov	r3, r9
 8003492:	aa03      	add	r2, sp, #12
 8003494:	4621      	mov	r1, r4
 8003496:	4640      	mov	r0, r8
 8003498:	f7ff fee6 	bl	8003268 <_printf_common>
 800349c:	3001      	adds	r0, #1
 800349e:	d14a      	bne.n	8003536 <_printf_i+0x1f2>
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	b004      	add	sp, #16
 80034a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	f043 0320 	orr.w	r3, r3, #32
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	4833      	ldr	r0, [pc, #204]	@ (8003580 <_printf_i+0x23c>)
 80034b4:	2778      	movs	r7, #120	@ 0x78
 80034b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	6831      	ldr	r1, [r6, #0]
 80034be:	061f      	lsls	r7, r3, #24
 80034c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80034c4:	d402      	bmi.n	80034cc <_printf_i+0x188>
 80034c6:	065f      	lsls	r7, r3, #25
 80034c8:	bf48      	it	mi
 80034ca:	b2ad      	uxthmi	r5, r5
 80034cc:	6031      	str	r1, [r6, #0]
 80034ce:	07d9      	lsls	r1, r3, #31
 80034d0:	bf44      	itt	mi
 80034d2:	f043 0320 	orrmi.w	r3, r3, #32
 80034d6:	6023      	strmi	r3, [r4, #0]
 80034d8:	b11d      	cbz	r5, 80034e2 <_printf_i+0x19e>
 80034da:	2310      	movs	r3, #16
 80034dc:	e7ac      	b.n	8003438 <_printf_i+0xf4>
 80034de:	4827      	ldr	r0, [pc, #156]	@ (800357c <_printf_i+0x238>)
 80034e0:	e7e9      	b.n	80034b6 <_printf_i+0x172>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	f023 0320 	bic.w	r3, r3, #32
 80034e8:	6023      	str	r3, [r4, #0]
 80034ea:	e7f6      	b.n	80034da <_printf_i+0x196>
 80034ec:	4616      	mov	r6, r2
 80034ee:	e7bd      	b.n	800346c <_printf_i+0x128>
 80034f0:	6833      	ldr	r3, [r6, #0]
 80034f2:	6825      	ldr	r5, [r4, #0]
 80034f4:	6961      	ldr	r1, [r4, #20]
 80034f6:	1d18      	adds	r0, r3, #4
 80034f8:	6030      	str	r0, [r6, #0]
 80034fa:	062e      	lsls	r6, r5, #24
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	d501      	bpl.n	8003504 <_printf_i+0x1c0>
 8003500:	6019      	str	r1, [r3, #0]
 8003502:	e002      	b.n	800350a <_printf_i+0x1c6>
 8003504:	0668      	lsls	r0, r5, #25
 8003506:	d5fb      	bpl.n	8003500 <_printf_i+0x1bc>
 8003508:	8019      	strh	r1, [r3, #0]
 800350a:	2300      	movs	r3, #0
 800350c:	6123      	str	r3, [r4, #16]
 800350e:	4616      	mov	r6, r2
 8003510:	e7bc      	b.n	800348c <_printf_i+0x148>
 8003512:	6833      	ldr	r3, [r6, #0]
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	6032      	str	r2, [r6, #0]
 8003518:	681e      	ldr	r6, [r3, #0]
 800351a:	6862      	ldr	r2, [r4, #4]
 800351c:	2100      	movs	r1, #0
 800351e:	4630      	mov	r0, r6
 8003520:	f7fc fe56 	bl	80001d0 <memchr>
 8003524:	b108      	cbz	r0, 800352a <_printf_i+0x1e6>
 8003526:	1b80      	subs	r0, r0, r6
 8003528:	6060      	str	r0, [r4, #4]
 800352a:	6863      	ldr	r3, [r4, #4]
 800352c:	6123      	str	r3, [r4, #16]
 800352e:	2300      	movs	r3, #0
 8003530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003534:	e7aa      	b.n	800348c <_printf_i+0x148>
 8003536:	6923      	ldr	r3, [r4, #16]
 8003538:	4632      	mov	r2, r6
 800353a:	4649      	mov	r1, r9
 800353c:	4640      	mov	r0, r8
 800353e:	47d0      	blx	sl
 8003540:	3001      	adds	r0, #1
 8003542:	d0ad      	beq.n	80034a0 <_printf_i+0x15c>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	079b      	lsls	r3, r3, #30
 8003548:	d413      	bmi.n	8003572 <_printf_i+0x22e>
 800354a:	68e0      	ldr	r0, [r4, #12]
 800354c:	9b03      	ldr	r3, [sp, #12]
 800354e:	4298      	cmp	r0, r3
 8003550:	bfb8      	it	lt
 8003552:	4618      	movlt	r0, r3
 8003554:	e7a6      	b.n	80034a4 <_printf_i+0x160>
 8003556:	2301      	movs	r3, #1
 8003558:	4632      	mov	r2, r6
 800355a:	4649      	mov	r1, r9
 800355c:	4640      	mov	r0, r8
 800355e:	47d0      	blx	sl
 8003560:	3001      	adds	r0, #1
 8003562:	d09d      	beq.n	80034a0 <_printf_i+0x15c>
 8003564:	3501      	adds	r5, #1
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	9903      	ldr	r1, [sp, #12]
 800356a:	1a5b      	subs	r3, r3, r1
 800356c:	42ab      	cmp	r3, r5
 800356e:	dcf2      	bgt.n	8003556 <_printf_i+0x212>
 8003570:	e7eb      	b.n	800354a <_printf_i+0x206>
 8003572:	2500      	movs	r5, #0
 8003574:	f104 0619 	add.w	r6, r4, #25
 8003578:	e7f5      	b.n	8003566 <_printf_i+0x222>
 800357a:	bf00      	nop
 800357c:	080039b1 	.word	0x080039b1
 8003580:	080039c2 	.word	0x080039c2

08003584 <__sflush_r>:
 8003584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800358c:	0716      	lsls	r6, r2, #28
 800358e:	4605      	mov	r5, r0
 8003590:	460c      	mov	r4, r1
 8003592:	d454      	bmi.n	800363e <__sflush_r+0xba>
 8003594:	684b      	ldr	r3, [r1, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	dc02      	bgt.n	80035a0 <__sflush_r+0x1c>
 800359a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	dd48      	ble.n	8003632 <__sflush_r+0xae>
 80035a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035a2:	2e00      	cmp	r6, #0
 80035a4:	d045      	beq.n	8003632 <__sflush_r+0xae>
 80035a6:	2300      	movs	r3, #0
 80035a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80035ac:	682f      	ldr	r7, [r5, #0]
 80035ae:	6a21      	ldr	r1, [r4, #32]
 80035b0:	602b      	str	r3, [r5, #0]
 80035b2:	d030      	beq.n	8003616 <__sflush_r+0x92>
 80035b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	0759      	lsls	r1, r3, #29
 80035ba:	d505      	bpl.n	80035c8 <__sflush_r+0x44>
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	1ad2      	subs	r2, r2, r3
 80035c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80035c2:	b10b      	cbz	r3, 80035c8 <__sflush_r+0x44>
 80035c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035c6:	1ad2      	subs	r2, r2, r3
 80035c8:	2300      	movs	r3, #0
 80035ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035cc:	6a21      	ldr	r1, [r4, #32]
 80035ce:	4628      	mov	r0, r5
 80035d0:	47b0      	blx	r6
 80035d2:	1c43      	adds	r3, r0, #1
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	d106      	bne.n	80035e6 <__sflush_r+0x62>
 80035d8:	6829      	ldr	r1, [r5, #0]
 80035da:	291d      	cmp	r1, #29
 80035dc:	d82b      	bhi.n	8003636 <__sflush_r+0xb2>
 80035de:	4a2a      	ldr	r2, [pc, #168]	@ (8003688 <__sflush_r+0x104>)
 80035e0:	410a      	asrs	r2, r1
 80035e2:	07d6      	lsls	r6, r2, #31
 80035e4:	d427      	bmi.n	8003636 <__sflush_r+0xb2>
 80035e6:	2200      	movs	r2, #0
 80035e8:	6062      	str	r2, [r4, #4]
 80035ea:	04d9      	lsls	r1, r3, #19
 80035ec:	6922      	ldr	r2, [r4, #16]
 80035ee:	6022      	str	r2, [r4, #0]
 80035f0:	d504      	bpl.n	80035fc <__sflush_r+0x78>
 80035f2:	1c42      	adds	r2, r0, #1
 80035f4:	d101      	bne.n	80035fa <__sflush_r+0x76>
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	b903      	cbnz	r3, 80035fc <__sflush_r+0x78>
 80035fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80035fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035fe:	602f      	str	r7, [r5, #0]
 8003600:	b1b9      	cbz	r1, 8003632 <__sflush_r+0xae>
 8003602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003606:	4299      	cmp	r1, r3
 8003608:	d002      	beq.n	8003610 <__sflush_r+0x8c>
 800360a:	4628      	mov	r0, r5
 800360c:	f7ff fbf2 	bl	8002df4 <_free_r>
 8003610:	2300      	movs	r3, #0
 8003612:	6363      	str	r3, [r4, #52]	@ 0x34
 8003614:	e00d      	b.n	8003632 <__sflush_r+0xae>
 8003616:	2301      	movs	r3, #1
 8003618:	4628      	mov	r0, r5
 800361a:	47b0      	blx	r6
 800361c:	4602      	mov	r2, r0
 800361e:	1c50      	adds	r0, r2, #1
 8003620:	d1c9      	bne.n	80035b6 <__sflush_r+0x32>
 8003622:	682b      	ldr	r3, [r5, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0c6      	beq.n	80035b6 <__sflush_r+0x32>
 8003628:	2b1d      	cmp	r3, #29
 800362a:	d001      	beq.n	8003630 <__sflush_r+0xac>
 800362c:	2b16      	cmp	r3, #22
 800362e:	d11e      	bne.n	800366e <__sflush_r+0xea>
 8003630:	602f      	str	r7, [r5, #0]
 8003632:	2000      	movs	r0, #0
 8003634:	e022      	b.n	800367c <__sflush_r+0xf8>
 8003636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800363a:	b21b      	sxth	r3, r3
 800363c:	e01b      	b.n	8003676 <__sflush_r+0xf2>
 800363e:	690f      	ldr	r7, [r1, #16]
 8003640:	2f00      	cmp	r7, #0
 8003642:	d0f6      	beq.n	8003632 <__sflush_r+0xae>
 8003644:	0793      	lsls	r3, r2, #30
 8003646:	680e      	ldr	r6, [r1, #0]
 8003648:	bf08      	it	eq
 800364a:	694b      	ldreq	r3, [r1, #20]
 800364c:	600f      	str	r7, [r1, #0]
 800364e:	bf18      	it	ne
 8003650:	2300      	movne	r3, #0
 8003652:	eba6 0807 	sub.w	r8, r6, r7
 8003656:	608b      	str	r3, [r1, #8]
 8003658:	f1b8 0f00 	cmp.w	r8, #0
 800365c:	dde9      	ble.n	8003632 <__sflush_r+0xae>
 800365e:	6a21      	ldr	r1, [r4, #32]
 8003660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003662:	4643      	mov	r3, r8
 8003664:	463a      	mov	r2, r7
 8003666:	4628      	mov	r0, r5
 8003668:	47b0      	blx	r6
 800366a:	2800      	cmp	r0, #0
 800366c:	dc08      	bgt.n	8003680 <__sflush_r+0xfc>
 800366e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003680:	4407      	add	r7, r0
 8003682:	eba8 0800 	sub.w	r8, r8, r0
 8003686:	e7e7      	b.n	8003658 <__sflush_r+0xd4>
 8003688:	dfbffffe 	.word	0xdfbffffe

0800368c <_fflush_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	690b      	ldr	r3, [r1, #16]
 8003690:	4605      	mov	r5, r0
 8003692:	460c      	mov	r4, r1
 8003694:	b913      	cbnz	r3, 800369c <_fflush_r+0x10>
 8003696:	2500      	movs	r5, #0
 8003698:	4628      	mov	r0, r5
 800369a:	bd38      	pop	{r3, r4, r5, pc}
 800369c:	b118      	cbz	r0, 80036a6 <_fflush_r+0x1a>
 800369e:	6a03      	ldr	r3, [r0, #32]
 80036a0:	b90b      	cbnz	r3, 80036a6 <_fflush_r+0x1a>
 80036a2:	f7ff fa9f 	bl	8002be4 <__sinit>
 80036a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f3      	beq.n	8003696 <_fflush_r+0xa>
 80036ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80036b0:	07d0      	lsls	r0, r2, #31
 80036b2:	d404      	bmi.n	80036be <_fflush_r+0x32>
 80036b4:	0599      	lsls	r1, r3, #22
 80036b6:	d402      	bmi.n	80036be <_fflush_r+0x32>
 80036b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036ba:	f7ff fb98 	bl	8002dee <__retarget_lock_acquire_recursive>
 80036be:	4628      	mov	r0, r5
 80036c0:	4621      	mov	r1, r4
 80036c2:	f7ff ff5f 	bl	8003584 <__sflush_r>
 80036c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036c8:	07da      	lsls	r2, r3, #31
 80036ca:	4605      	mov	r5, r0
 80036cc:	d4e4      	bmi.n	8003698 <_fflush_r+0xc>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	059b      	lsls	r3, r3, #22
 80036d2:	d4e1      	bmi.n	8003698 <_fflush_r+0xc>
 80036d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036d6:	f7ff fb8b 	bl	8002df0 <__retarget_lock_release_recursive>
 80036da:	e7dd      	b.n	8003698 <_fflush_r+0xc>

080036dc <__swbuf_r>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	460e      	mov	r6, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	4605      	mov	r5, r0
 80036e4:	b118      	cbz	r0, 80036ee <__swbuf_r+0x12>
 80036e6:	6a03      	ldr	r3, [r0, #32]
 80036e8:	b90b      	cbnz	r3, 80036ee <__swbuf_r+0x12>
 80036ea:	f7ff fa7b 	bl	8002be4 <__sinit>
 80036ee:	69a3      	ldr	r3, [r4, #24]
 80036f0:	60a3      	str	r3, [r4, #8]
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	071a      	lsls	r2, r3, #28
 80036f6:	d501      	bpl.n	80036fc <__swbuf_r+0x20>
 80036f8:	6923      	ldr	r3, [r4, #16]
 80036fa:	b943      	cbnz	r3, 800370e <__swbuf_r+0x32>
 80036fc:	4621      	mov	r1, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 f82a 	bl	8003758 <__swsetup_r>
 8003704:	b118      	cbz	r0, 800370e <__swbuf_r+0x32>
 8003706:	f04f 37ff 	mov.w	r7, #4294967295
 800370a:	4638      	mov	r0, r7
 800370c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	6922      	ldr	r2, [r4, #16]
 8003712:	1a98      	subs	r0, r3, r2
 8003714:	6963      	ldr	r3, [r4, #20]
 8003716:	b2f6      	uxtb	r6, r6
 8003718:	4283      	cmp	r3, r0
 800371a:	4637      	mov	r7, r6
 800371c:	dc05      	bgt.n	800372a <__swbuf_r+0x4e>
 800371e:	4621      	mov	r1, r4
 8003720:	4628      	mov	r0, r5
 8003722:	f7ff ffb3 	bl	800368c <_fflush_r>
 8003726:	2800      	cmp	r0, #0
 8003728:	d1ed      	bne.n	8003706 <__swbuf_r+0x2a>
 800372a:	68a3      	ldr	r3, [r4, #8]
 800372c:	3b01      	subs	r3, #1
 800372e:	60a3      	str	r3, [r4, #8]
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	6022      	str	r2, [r4, #0]
 8003736:	701e      	strb	r6, [r3, #0]
 8003738:	6962      	ldr	r2, [r4, #20]
 800373a:	1c43      	adds	r3, r0, #1
 800373c:	429a      	cmp	r2, r3
 800373e:	d004      	beq.n	800374a <__swbuf_r+0x6e>
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	07db      	lsls	r3, r3, #31
 8003744:	d5e1      	bpl.n	800370a <__swbuf_r+0x2e>
 8003746:	2e0a      	cmp	r6, #10
 8003748:	d1df      	bne.n	800370a <__swbuf_r+0x2e>
 800374a:	4621      	mov	r1, r4
 800374c:	4628      	mov	r0, r5
 800374e:	f7ff ff9d 	bl	800368c <_fflush_r>
 8003752:	2800      	cmp	r0, #0
 8003754:	d0d9      	beq.n	800370a <__swbuf_r+0x2e>
 8003756:	e7d6      	b.n	8003706 <__swbuf_r+0x2a>

08003758 <__swsetup_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4b29      	ldr	r3, [pc, #164]	@ (8003800 <__swsetup_r+0xa8>)
 800375c:	4605      	mov	r5, r0
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	460c      	mov	r4, r1
 8003762:	b118      	cbz	r0, 800376c <__swsetup_r+0x14>
 8003764:	6a03      	ldr	r3, [r0, #32]
 8003766:	b90b      	cbnz	r3, 800376c <__swsetup_r+0x14>
 8003768:	f7ff fa3c 	bl	8002be4 <__sinit>
 800376c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003770:	0719      	lsls	r1, r3, #28
 8003772:	d422      	bmi.n	80037ba <__swsetup_r+0x62>
 8003774:	06da      	lsls	r2, r3, #27
 8003776:	d407      	bmi.n	8003788 <__swsetup_r+0x30>
 8003778:	2209      	movs	r2, #9
 800377a:	602a      	str	r2, [r5, #0]
 800377c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	f04f 30ff 	mov.w	r0, #4294967295
 8003786:	e033      	b.n	80037f0 <__swsetup_r+0x98>
 8003788:	0758      	lsls	r0, r3, #29
 800378a:	d512      	bpl.n	80037b2 <__swsetup_r+0x5a>
 800378c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800378e:	b141      	cbz	r1, 80037a2 <__swsetup_r+0x4a>
 8003790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003794:	4299      	cmp	r1, r3
 8003796:	d002      	beq.n	800379e <__swsetup_r+0x46>
 8003798:	4628      	mov	r0, r5
 800379a:	f7ff fb2b 	bl	8002df4 <_free_r>
 800379e:	2300      	movs	r3, #0
 80037a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80037a2:	89a3      	ldrh	r3, [r4, #12]
 80037a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037a8:	81a3      	strh	r3, [r4, #12]
 80037aa:	2300      	movs	r3, #0
 80037ac:	6063      	str	r3, [r4, #4]
 80037ae:	6923      	ldr	r3, [r4, #16]
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	f043 0308 	orr.w	r3, r3, #8
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	6923      	ldr	r3, [r4, #16]
 80037bc:	b94b      	cbnz	r3, 80037d2 <__swsetup_r+0x7a>
 80037be:	89a3      	ldrh	r3, [r4, #12]
 80037c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80037c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c8:	d003      	beq.n	80037d2 <__swsetup_r+0x7a>
 80037ca:	4621      	mov	r1, r4
 80037cc:	4628      	mov	r0, r5
 80037ce:	f000 f84f 	bl	8003870 <__smakebuf_r>
 80037d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d6:	f013 0201 	ands.w	r2, r3, #1
 80037da:	d00a      	beq.n	80037f2 <__swsetup_r+0x9a>
 80037dc:	2200      	movs	r2, #0
 80037de:	60a2      	str	r2, [r4, #8]
 80037e0:	6962      	ldr	r2, [r4, #20]
 80037e2:	4252      	negs	r2, r2
 80037e4:	61a2      	str	r2, [r4, #24]
 80037e6:	6922      	ldr	r2, [r4, #16]
 80037e8:	b942      	cbnz	r2, 80037fc <__swsetup_r+0xa4>
 80037ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80037ee:	d1c5      	bne.n	800377c <__swsetup_r+0x24>
 80037f0:	bd38      	pop	{r3, r4, r5, pc}
 80037f2:	0799      	lsls	r1, r3, #30
 80037f4:	bf58      	it	pl
 80037f6:	6962      	ldrpl	r2, [r4, #20]
 80037f8:	60a2      	str	r2, [r4, #8]
 80037fa:	e7f4      	b.n	80037e6 <__swsetup_r+0x8e>
 80037fc:	2000      	movs	r0, #0
 80037fe:	e7f7      	b.n	80037f0 <__swsetup_r+0x98>
 8003800:	20000018 	.word	0x20000018

08003804 <_sbrk_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4d06      	ldr	r5, [pc, #24]	@ (8003820 <_sbrk_r+0x1c>)
 8003808:	2300      	movs	r3, #0
 800380a:	4604      	mov	r4, r0
 800380c:	4608      	mov	r0, r1
 800380e:	602b      	str	r3, [r5, #0]
 8003810:	f7fc ff68 	bl	80006e4 <_sbrk>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d102      	bne.n	800381e <_sbrk_r+0x1a>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	b103      	cbz	r3, 800381e <_sbrk_r+0x1a>
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	20000250 	.word	0x20000250

08003824 <__swhatbuf_r>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	460c      	mov	r4, r1
 8003828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382c:	2900      	cmp	r1, #0
 800382e:	b096      	sub	sp, #88	@ 0x58
 8003830:	4615      	mov	r5, r2
 8003832:	461e      	mov	r6, r3
 8003834:	da0d      	bge.n	8003852 <__swhatbuf_r+0x2e>
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	bf14      	ite	ne
 8003842:	2340      	movne	r3, #64	@ 0x40
 8003844:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003848:	2000      	movs	r0, #0
 800384a:	6031      	str	r1, [r6, #0]
 800384c:	602b      	str	r3, [r5, #0]
 800384e:	b016      	add	sp, #88	@ 0x58
 8003850:	bd70      	pop	{r4, r5, r6, pc}
 8003852:	466a      	mov	r2, sp
 8003854:	f000 f848 	bl	80038e8 <_fstat_r>
 8003858:	2800      	cmp	r0, #0
 800385a:	dbec      	blt.n	8003836 <__swhatbuf_r+0x12>
 800385c:	9901      	ldr	r1, [sp, #4]
 800385e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003862:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003866:	4259      	negs	r1, r3
 8003868:	4159      	adcs	r1, r3
 800386a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800386e:	e7eb      	b.n	8003848 <__swhatbuf_r+0x24>

08003870 <__smakebuf_r>:
 8003870:	898b      	ldrh	r3, [r1, #12]
 8003872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003874:	079d      	lsls	r5, r3, #30
 8003876:	4606      	mov	r6, r0
 8003878:	460c      	mov	r4, r1
 800387a:	d507      	bpl.n	800388c <__smakebuf_r+0x1c>
 800387c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	6123      	str	r3, [r4, #16]
 8003884:	2301      	movs	r3, #1
 8003886:	6163      	str	r3, [r4, #20]
 8003888:	b003      	add	sp, #12
 800388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388c:	ab01      	add	r3, sp, #4
 800388e:	466a      	mov	r2, sp
 8003890:	f7ff ffc8 	bl	8003824 <__swhatbuf_r>
 8003894:	9f00      	ldr	r7, [sp, #0]
 8003896:	4605      	mov	r5, r0
 8003898:	4639      	mov	r1, r7
 800389a:	4630      	mov	r0, r6
 800389c:	f7ff fb16 	bl	8002ecc <_malloc_r>
 80038a0:	b948      	cbnz	r0, 80038b6 <__smakebuf_r+0x46>
 80038a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a6:	059a      	lsls	r2, r3, #22
 80038a8:	d4ee      	bmi.n	8003888 <__smakebuf_r+0x18>
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	e7e2      	b.n	800387c <__smakebuf_r+0xc>
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	6020      	str	r0, [r4, #0]
 80038ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038be:	81a3      	strh	r3, [r4, #12]
 80038c0:	9b01      	ldr	r3, [sp, #4]
 80038c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80038c6:	b15b      	cbz	r3, 80038e0 <__smakebuf_r+0x70>
 80038c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038cc:	4630      	mov	r0, r6
 80038ce:	f000 f81d 	bl	800390c <_isatty_r>
 80038d2:	b128      	cbz	r0, 80038e0 <__smakebuf_r+0x70>
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	431d      	orrs	r5, r3
 80038e4:	81a5      	strh	r5, [r4, #12]
 80038e6:	e7cf      	b.n	8003888 <__smakebuf_r+0x18>

080038e8 <_fstat_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	4d07      	ldr	r5, [pc, #28]	@ (8003908 <_fstat_r+0x20>)
 80038ec:	2300      	movs	r3, #0
 80038ee:	4604      	mov	r4, r0
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	f7fc fecd 	bl	8000694 <_fstat>
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	d102      	bne.n	8003904 <_fstat_r+0x1c>
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	b103      	cbz	r3, 8003904 <_fstat_r+0x1c>
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	bd38      	pop	{r3, r4, r5, pc}
 8003906:	bf00      	nop
 8003908:	20000250 	.word	0x20000250

0800390c <_isatty_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4d06      	ldr	r5, [pc, #24]	@ (8003928 <_isatty_r+0x1c>)
 8003910:	2300      	movs	r3, #0
 8003912:	4604      	mov	r4, r0
 8003914:	4608      	mov	r0, r1
 8003916:	602b      	str	r3, [r5, #0]
 8003918:	f7fc fecc 	bl	80006b4 <_isatty>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_isatty_r+0x1a>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b103      	cbz	r3, 8003926 <_isatty_r+0x1a>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	20000250 	.word	0x20000250

0800392c <_init>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr

08003938 <_fini>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr
